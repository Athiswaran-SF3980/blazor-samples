@page "/gantt-chart/resource-view"

@using Syncfusion.Blazor.Gantt
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager

<PageTitle>Blazor Gantt Chart Resource view Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Resource view in Blazor Gantt Chart Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample explains the resource breakdown view in the Gantt chart, which is how to visualize the list of tasks assigned to each resource in a hierarchical manner and switch the resources as per the user's needs by task editing mode. If no resources are mapped to a task, then it will come under the “Unassigned Tasks” category. This feature can be enabled by setting the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_ViewType">ViewType</a> to <code>ResourceView</code>.</p>
    <p>When a resource is assigned two or more tasks that are scheduled on the same date, this is termed overallocation for the resource. The number of overallocation dates is highlighted in square brackets. This feature can be enabled by setting <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_ShowOverallocation'>ShowOverallocation</a> to <code>true</code>. The following sample demonstrates the overallocation of a resource.</p>
</SampleDescription>
<ActionDescription>

    <p>  In this example, you can plan and allocate resources to tasks in the project based on task complexity and resource availability. The user can also assign resources to tasks with no resources by row drag and drop. To achieve this action, set the <a target="_blank" href="https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.SfGantt-1.html#Syncfusion_Blazor_Gantt_SfGantt_1_AllowRowDragAndDrop">AllowRowDragAndDrop</a> property to <code>true</code>. In this demo, there is a set of predefined resources, and those IDs are assigned to the task. Resource information can be shown in a Gantt chart by using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttLabelSettings-1.html'>LabelSettings</a> property.</p>

    <p>Resources can be mapped using the <a target='_blank' href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.Gantt.GanttResourceFields-1.html'>ResourceFields</a> component with the following properties:</p>
    <p>
        <ul>
            <li><code>Id</code> - To map resource ID</li>
            <li> <code>Name</code> - To map resource name</li>
            <li><code>Unit</code> - To map resource unit</li>
            <li><code>Group</code> - To map resource group</li>
        </ul>
    </p>
    <p>By utilizing the toggle button in this example, you have the ability to effortlessly transition between the resource view and project view, enabling you to conveniently access the desired perspective and make well-informed decisions based on the pertinent information available. </p>
    <p>
        More information about resource view in Gantt can be found in this <a target='_blank' href='https://blazor.syncfusion.com/documentation/gantt-chart/resource-view'>documentation section</a>.
    </p>
</ActionDescription>
<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGantt @ref="Gantt" ShowOverallocation="@ShowOverallocation" TreeColumnIndex="1" DataSource="@TaskCollection" Height="450px" Width="100%" AllowRowDragAndDrop="true" RowHeight="37"
                     Toolbar="@(new List<Object>() { "Add", "Cancel", "Update" , "Delete", "Edit", "CollapseAll", "ExpandAll",new ToolbarItem() { Text = "Show/Hide Overallocation", TooltipText = "Show/Hide Overallocation", Id = "ShowHideBar", Visible=Check, PrefixIcon="e-icons e-eye" } })" AllowResizing ViewType="@viewType" EnableAdaptiveUI="true">
                <GanttTaskFields Id="TaskId" Name="TaskName" StartDate="StartDate" EndDate="EndDate" Duration="Duration" Progress="Progress"
                                 ParentID="ParentId" Work="Work" ResourceInfo="Resources" Dependency="Predecessor">
                </GanttTaskFields>
                <GanttResourceFields Group="ResourceGroup" Resources="@ResourceCollection" Id="ResourceId" Name="ResourceName" Unit="Unit" TResources="ResourceAlloacteData"></GanttResourceFields>
                <GanttLabelSettings RightLabel="Resources" TaskLabel="Progress" TValue="TaskData"></GanttLabelSettings>
                <GanttEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true" Mode="Syncfusion.Blazor.Gantt.EditMode.Dialog"></GanttEditSettings>
                <GanttColumns>
                    <GanttColumn Field="TaskId" Visible=false></GanttColumn>
                    <GanttColumn Field="ResourceId" Visible=false></GanttColumn>
                    <GanttColumn Field="TaskName" HeaderText="Name" Width="250"></GanttColumn>
                    <GanttColumn Field="ResourceName" HeaderText="Name" Width="250"></GanttColumn>
                    <GanttColumn Field="Work" HeaderText="Work"></GanttColumn>
                    <GanttColumn Field="Progress"></GanttColumn>
                    <GanttColumn Field="StartDate" HeaderText="Start Date"></GanttColumn>
                    <GanttColumn Field="Duration" HeaderText="Duration"></GanttColumn>
                </GanttColumns>
                <GanttEvents OnToolbarClick="ToolbarClickHandler" TValue="TaskData"></GanttEvents>
            </SfGantt>
        </div>
    </div>
</div>

@code {
    public SfGantt<TaskData> Gantt;
    private DateTime ProjectStart = new DateTime(2022, 03, 25);
    private DateTime ProjectEnd = new DateTime(2022, 05, 10);
    private List<TaskData> TaskCollection { get; set; }
    private List<ResourceAlloacteData> ResourceCollection { get; set; }
    private ViewType viewType { get; set; } = ViewType.ResourceView;
    private bool ShowOverallocation { get; set; } = true;
    private Boolean Check = true;
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden
    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
        this.ResourceCollection = GetResources;
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        //End:Hidden

    }
    public class ResourceAlloacteData
    {
        public int ResourceId { get; set; }
        public string ResourceName { get; set; }
        public double Unit { get; set; }
        public string? ResourceGroup { get; set; }
    }
    public static List<ResourceAlloacteData> GetResources = new List<ResourceAlloacteData>()
    {

        new ResourceAlloacteData() { ResourceId= 1, ResourceName= "Martin Tamer", ResourceGroup="Planning Team"},
        new ResourceAlloacteData() { ResourceId= 2, ResourceName= "Rose Fuller", ResourceGroup="Testing Team" },
        new ResourceAlloacteData() { ResourceId= 3, ResourceName= "Margaret Buchanan", ResourceGroup="Approval Team" },
        new ResourceAlloacteData() { ResourceId= 4, ResourceName= "Fuller King", ResourceGroup="Development Team" },
        new ResourceAlloacteData() { ResourceId= 5, ResourceName= "Davolio Fuller", ResourceGroup="Approval Team" },
        new ResourceAlloacteData() { ResourceId= 6, ResourceName= "Fuller Buchanan", ResourceGroup="Development Team" },
        new ResourceAlloacteData() { ResourceId= 7, ResourceName= "Jack Davolio", ResourceGroup="Planning Team" },
        new ResourceAlloacteData() { ResourceId= 8, ResourceName= "Tamer Vinet", ResourceGroup="Testing Team" },
        new ResourceAlloacteData() { ResourceId= 9, ResourceName= "Vinet Fuller", ResourceGroup="Development Team" },
        new ResourceAlloacteData() { ResourceId= 10, ResourceName= "Bergs Anton", ResourceGroup="Testing Team" },
        new ResourceAlloacteData() { ResourceId= 11, ResourceName= "Construction Supervisor", ResourceGroup="Testing Team" },
    };

    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public int? ParentId { get; set; }
        public string Predecessor { get; set; }
        public string Notes { get; set; }
        public double? Work { get; set; }
        public string TaskType { get; set; }
        public DateTime BaselineStartDate { get; set; }
        public DateTime BaselineEndDate { get; set; }
        public List<ResourceAlloacteData> Resources { get; set; }
        public string? Details { get; set; }
    }
    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {
            new TaskData() { TaskId = 1, TaskName = "Project initiation", StartDate = new DateTime(2022, 03, 28), EndDate = new DateTime(2022, 07, 28), TaskType ="FixedDuration", Work=128, Duration="4" },
            new TaskData() { TaskId = 2, TaskName = "Identify Site location", StartDate = new DateTime(2022, 03, 29), BaselineStartDate = new DateTime(2022, 03, 29), BaselineEndDate= new DateTime(2022, 03, 31),  Progress = 30, ParentId = 1, Duration="5", Work=16, Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=1, Unit=70} } },
            new TaskData() { TaskId = 3, TaskName = "Site Analyze", StartDate = new DateTime(2022, 03, 29), BaselineStartDate = new DateTime(2022, 03, 29), BaselineEndDate= new DateTime(2022, 03, 31),  Progress = 50, ParentId = 1, Duration="5", Work=16, Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=1, Unit=70} } },
            new TaskData() { TaskId = 4, TaskName = "Perform soil test", StartDate = new DateTime(2022, 03, 29), Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=3} }, ParentId = 1, Work=96, Duration="6", TaskType="FixedWork", Predecessor="2FS", Progress=40 },
            new TaskData() { TaskId = 5, TaskName = "Soil test approval", StartDate = new DateTime(2022, 03, 29), BaselineStartDate= new DateTime(2022, 03, 29), BaselineEndDate= new DateTime(2022, 03, 31), Duration="4", Progress = 30, ParentId = 1, Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=8} }, Work=16, TaskType="FixedWork" },
            new TaskData() { TaskId = 6, TaskName = "Project estimation", StartDate = new DateTime(2022, 03, 29), EndDate = new DateTime(2022, 04, 2), TaskType="FixedDuration", Duration="7",Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=2} }, Progress=40, Work=50 },
            new TaskData() { TaskId = 7, TaskName = "Develop floor plan for estimation", StartDate = new DateTime(2022, 03, 29), Duration = "9", Progress = 30, ParentId = 5, Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=4, Unit=30} }, Work=30, TaskType="FixedDuration",  Predecessor= "4FS" },
            new TaskData() { TaskId = 8, TaskName = "List materials", StartDate = new DateTime(2022, 04, 01), Duration = "6", Progress = 30, ParentId = 5, TaskType="FixedWork", Work=48, Resources = new List<ResourceAlloacteData>(){new ResourceAlloacteData() { ResourceId=8} },  },
            new TaskData() { TaskId = 9, TaskName = "Estimation approval",Progress=30, StartDate = new DateTime(2022, 04, 01), Duration = "8", ParentId = 5, BaselineStartDate= new DateTime(2022, 03, 29), BaselineEndDate= new DateTime(2022, 03, 31), Work=60, TaskType="FixedUnit", Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId= 11} }, Predecessor="8FS" },
            new TaskData() { TaskId = 10, TaskName = "Building approval", StartDate = new DateTime(2022, 04, 01), Duration = "4", ParentId = 5, Work=60, Progress=50, TaskType="FixedWork", },
            new TaskData() { TaskId = 11, TaskName = "Construction initiation", StartDate = new DateTime(2022, 04, 01), Duration = "5", ParentId = 5, Work=60,Progress=40, TaskType="FixedDuration", },
            new TaskData() { TaskId = 12, TaskName = "Ground floor initiation", StartDate = new DateTime(2022, 04, 05), Duration = "5", ParentId = 11, Work=60,Progress=40, TaskType="FixedDuration",Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=2} }, },
            new TaskData() { TaskId = 13, TaskName = "First floor initiation", StartDate = new DateTime(2022, 04, 01), Duration = "5", ParentId = 11, Work=60,Progress=40, TaskType="FixedDuration",Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=6} } },
            new TaskData() { TaskId = 14, TaskName = "Electric work initiation", StartDate = new DateTime(2022, 04, 01), Duration = "5", ParentId = 11, Work=60,Progress=40, TaskType="FixedDuration", Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=7} }},
            new TaskData() { TaskId = 15, TaskName = "Plumbing work", StartDate = new DateTime(2022, 04, 02), Duration = "5", ParentId = 11, Work=60,Progress=40, TaskType="FixedDuration",Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=9} } },
            new TaskData() { TaskId = 16, TaskName = "Interior work", StartDate = new DateTime(2022, 04, 01), Duration = "5", ParentId = 11, Work=60,Progress=40, TaskType="FixedDuration",Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=10} } },
            new TaskData() { TaskId = 17, TaskName = "Wiring test", StartDate = new DateTime(2022, 04, 04), Duration = "5", ParentId = 11, Work=60,Progress=40, TaskType="FixedDuration",Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=7} } },
            new TaskData() { TaskId = 18, TaskName = "Tile test", StartDate = new DateTime(2022, 04, 06), Duration = "5", ParentId = 11, Work=60,Progress=100, TaskType="FixedDuration",Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=5} } },
            new TaskData() { TaskId = 19, TaskName = "Tile work initation", StartDate = new DateTime(2022, 04, 09), Duration = "5", ParentId = 11, Work=60,Progress=40, TaskType="FixedDuration",Resources = new List<ResourceAlloacteData>(){ new ResourceAlloacteData() { ResourceId=5} } },
            new TaskData() { TaskId = 20, TaskName = "Building test", StartDate = new DateTime(2022, 04, 01), Duration = "4", ParentId = 5, Work=60, Progress=50, TaskType="FixedWork", },

       };
        return Tasks;
    }
    public void ToolbarClickHandler(ClickEventArgs args)
    {
        if (args.Item.Id == "ShowHideBar" )
        {
            ShowOverallocation = ShowOverallocation ? false: true;
        }
    }

}


