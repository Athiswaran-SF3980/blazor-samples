@page "/excel/encrypt-and-decrypt"
@using System.IO;

@using Blazor_MAUI_Demos.Services
@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@


@*End:Hidden*@
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@using Blazor_MAUI_Demos.Pages.DocumentProcessing.Excel


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to encrypt and decrypt workbooks using XlsIO.</p>
</SampleDescription>
<ActionDescription>
    <p>This sample focuses on the encryption and decryption of an Excel 2007, Excel 2010, Excel 2013 and Excel 2016 workbook using Essential XlsIO.</p>
    <p style='display: block'>Encryption is a method of protecting workbook data. It is based on a password that converts the data into a form that cannot be understood; it also restricts anonymous users from accessing a document. Decryption is the process of converting encrypted data back into its original form so that data can be read from the workbook.</p>
    <p style='display: block'>A password for encrypting a workbook can be set in Microsoft Excel 2007, Excel 2010 and Excel 2013 through the Office Menu->Prepare->Encrypt Document command.</p>
    <p style='display: block'><b>Note:</b> Password protection of a workbook file is different from the workbook structure and window protection you can set in the <b>Review->Protect Workbook</b></p>
    <p style='display: block'><b>Features:</b></p>
    <ul>
        <li>Encrypting with a password</li>
        <li>Decrypting with a password</li>
    </ul>
</ActionDescription>

<div class="control-section">
    <p style="font-weight:normal">Click the button to view an Excel spreadsheet generated by Essential XlsIO. Please note that Microsoft Excel Viewer or Microsoft Excel is required to view the resultant document.</p>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <div class="radio-control">
        <label style="font-weight:bold">Save As:</label>
        <SfRadioButton Label="XLS" Name="XLS" Value=@("XLS") @bind-Checked="@excelVersion"></SfRadioButton>
        <SfRadioButton Label="XLSX" Name="XLSX" Value=@("XLSX") @bind-Checked="@excelVersion"></SfRadioButton>
    </div>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="Encrypt">Encrypt Document</SfButton>&nbsp;
                    <SfButton @onclick="Decrypt">Decrypt</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream excelStream;
    string excelVersion = "XLSX";
    string button = string.Empty;
    //Hidden:Lines


    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();


    //End:Hidden
    /// <summary>
    /// Create and download the encrypted Excel document
    /// </summary>
    public async void Encrypt(MouseEventArgs args)
    {
        LoadTemplate("encrypt.xlsx");
        EncryptAndDecryptService service = new EncryptAndDecryptService(fileData);
        button = "Encrypt Document";
        excelStream = service.EncryptAndDecryptXlsIO(button, excelVersion);
        service.Close();
        excelStream.Position = 0;
        SaveService saveService = new SaveService();
        if (excelVersion == "XLSX")
        {
            saveService.SaveAndView("Sample.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", excelStream);
        }
        else
        {
            saveService.SaveAndView("Sample.xls", "application/vnd.ms-excel", excelStream);
        }
    }
    /// <summary>
    /// Download the decrypted Excel document
    /// </summary>
    public async void Decrypt(MouseEventArgs args)
    {
        LoadTemplate("encrypted-workbook.xlsx");
        EncryptAndDecryptService service = new EncryptAndDecryptService(fileData);
        button = "Decrypt Document";
        excelStream = service.EncryptAndDecryptXlsIO(button, excelVersion);
        service.Close();
        excelStream.Position = 0;
        SaveService saveService = new SaveService();
        if (excelVersion == "XLSX")
        {
            saveService.SaveAndView("Sample.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", excelStream);
        }
        else
        {
            saveService.SaveAndView("Sample.xls", "application/vnd.ms-excel", excelStream);
        }
    }

    public async void LoadTemplate(string fileName)
    {
        string basePath = "Blazor_MAUI_Demos.wwwroot.data.xlsio.";
        Stream DocumentStream = this.GetType().Assembly.GetManifestResourceStream(basePath + fileName);
        MemoryStream memoryStream = new MemoryStream();
        DocumentStream.CopyTo(memoryStream);
        memoryStream.Position = 0;
        fileData.Add(fileName, memoryStream);
        DocumentStream.Dispose();
    }
}