@page "/word/create-equation"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@using Blazor_MAUI_Demos.Pages.DocumentProcessing.Word
@using Blazor_MAUI_Demos.Services
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p style="font-size:16px">This sample demonstrates how to create a Word document with mathematical equations using Essential DocIO. </p>
</SampleDescription>
<ActionDescription>
    <p style="font-size:16px">With DocIO, you can create mathematical equations from scratch and insert them into Word documents (DOCX, DOTX, DOCM, DOTM, and XML). </p>
                <p style="font-size:16px">	<ul style="font-size:16px"><li>You can insert an equation in line with text or floating within a line.</li>
				<li>You can create all types of mathematical equations such as fraction, summation, integral, matrix, and more.</li>
			</ul>
		</p><p style="font-size:16px">More information about the headers and footers can be found in this <a href="https://help.syncfusion.com/file-formats/docio/working-with-mathematical-equation" aria-label="documentation section">documentation</a> section.</p>
</ActionDescription>

    <div class="control-section">
    @*Server:Block*@
    @{ #if !(WASM) && !WEBAPP}
	<p style="font-size:16px">Click the button to view the generated Word document or PDF. Please note that Microsoft Word Viewer or Microsoft Word is required to view the resultant Word document and PDF viewer is required to view the resultant PDF.</p>
	@{ #endif }
    @*End:Server*@
    @*WebAssembly:Block*@
    @{ #if (WASM) || WEBAPP }
        <p style="font-size:16px">Click the button to view the generated Word document. Please note that Microsoft Word Viewer or Microsoft Word is required to view the resultant Word document.</p>
    @{ #endif }
    @*End:WebAssembly*@
        <table>
            @*Server:Block*@
            @{ #if !(WASM) && !WEBAPP }
            <tr>
                <td>
                    <h5 class="row" style="font-size:16px">Save As:</h5>
                </td>
                <td>
                    <div class="col-xs-12 col-sm-12 col-lg-1 col-md-6">
                        <SfRadioButton Label="DOCX" Name="DOCX" Value=@("DOCX") @bind-Checked="@documentType"></SfRadioButton>
                    </div>
                </td>
                <td>
                    <div class="col-xs-12 col-sm-12 col-lg-1 col-md-6">
                        <SfRadioButton Label="PDF" Name="PDF" Value=@("PDF") @bind-Checked="@documentType"></SfRadioButton>
                    </div>
                </td>
            </tr>
            @{ #endif }
            @*End:Server*@
            <tr>
                <td colspan="4">
                    <div class="button-section">
                        <div id="button-control">
                            <div class="row">
                                <div>
                                    <SfButton @onclick="GenerateDocument">Generate Document</SfButton>
                                </div>
                            </div>
                        </div>
                    </div>
                </td>
            </tr>
        </table>
    </div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream documentStream;
    string documentType = "DOCX";
    //Hidden:Lines
    
    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
    
    //End:Hidden

    /// <summary>
    /// Create and download the simple Word document
    /// </summary>
    public async void GenerateDocument(MouseEventArgs args)
    {
        await LoadTemplate();
        CreateEquationService service = new CreateEquationService(fileData);
        documentStream = service.CreateEquation(documentType);
        service.Close();       
        documentStream.Position = 0;
        SaveService saveService = new();		
        if (documentType == "DOCX")
			saveService.SaveAndView("CreateEquation.docx", "application/msword", documentStream);
@*Server:Block*@
#if !(WASM) && !WEBAPP
        else if (documentType == "PDF")
			saveService.SaveAndView("CreateEquation.pdf", "application/pdf", documentStream);
#endif
        @*End:Server*@

    }
    /// <summary>
    /// Load the template document
    /// </summary>
    public async Task LoadTemplate()
    {
        if (fileData != null && fileData.Count == 0)
        {
            string basePath = "Blazor_MAUI_Demos.wwwroot.data.word.create-equation.docx";
            Stream DocumentStream = this.GetType().Assembly.GetManifestResourceStream(basePath);
            MemoryStream memoryStream = new MemoryStream();
            DocumentStream.CopyTo(memoryStream);
            memoryStream.Position = 0;
            fileData.Add("create-equation.docx", memoryStream);
            DocumentStream.Dispose();
        }
    }
}