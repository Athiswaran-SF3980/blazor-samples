@page "/pdf/rtl-text"
@using System.IO
@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@
@inherits SampleBaseComponent

@using Blazor_MAUI_Demos 
@using Blazor_MAUI_Demos.Services

@*End:Hidden*@
@*Hidden:Lines*@
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p style="font-size:16px">This sample demonstrates drawing right-to-left language text in the PDF document. It is possible to draw RTL languages such as Arabic, Hebrew, Persian, Urdu and more.</p>
</SampleDescription>
<ActionDescription>
   <p style="font-size:16px">It is also possible to draw<a target='_blank' href='https://help.syncfusion.com/file-formats/pdf/working-with-text#embedding-fonts-and-working-with-unicode-text' aria-label="Unicode text"> Unicode text</a>. More information about drawing text can be found in this documentation <a target='_blank' href='https://help.syncfusion.com/file-formats/pdf/working-with-text'  aria-label="documentation section">section.</a></p>
</ActionDescription>

<div class="control-section">
    <p style="font-size:16px">Click the button to view a PDF document generated by Essential PDF. Please note that Adobe Reader or its equivalent is required to view the resultant document. </p>

    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="GeneratePDF">Generate PDF</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .radio-control {
        margin: 0 0 5% 0;
    }

    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {

     
    
    /// <summary>
    /// Create and download the simple PDF document
    ///<summary>
    protected async void GeneratePDF(MouseEventArgs args)
    {        
        Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
        fileData.Add("arabic.txt", await ReadData("wwwroot/data/pdf/arabic.txt"));
        fileData.Add("arial.ttf", await ReadData("wwwroot/data/pdf/arial.ttf"));
        RTLTextService service= new RTLTextService(fileData);
        MemoryStream documentStream = service.CreatePdfDocument();
        service.Close();
		SaveService saveService = new SaveService();
        saveService.SaveAndView("RTLText.pdf", "application/pdf", documentStream);
    }
    private async Task<MemoryStream> ReadData(string fileName)
    {
        using var stream = await FileSystem.OpenAppPackageFileAsync(fileName);
        MemoryStream memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        memoryStream.Position = 0;
        return memoryStream;
    }
}
