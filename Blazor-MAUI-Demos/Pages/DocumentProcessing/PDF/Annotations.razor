@page "/pdf/annotations"
@using System.IO
@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@
@inherits SampleBaseComponent

@using Blazor_MAUI_Demos 
@using Blazor_MAUI_Demos.Services

@*End:Hidden*@


<SampleDescription>
    <p style="font-size:16px">This sample demonstrates the creation of different types of annotations such as ink, free text, pop up, text markup annotation, and more. The Essential PDF supports <a target='_blank' href='https://help.syncfusion.com/file-formats/pdf/working-with-annotations#supported-annotation-types' aria-label="20+ annotations">20+ annotations</a> with create, edit, and delete support.</p>
</SampleDescription>
<ActionDescription>
    <p style="font-size:16px">This feature can be used for reviewing purpose. More information about the annotations can be found in this documentation <a target='_blank' href='https://help.syncfusion.com/file-formats/pdf/working-with-annotations' aria-label="documentation section">section.</a></p>
</ActionDescription>

<div class="control-section">
    <p style="font-size:16px">Click the button to view a PDF document generated by Essential PDF. Please note that Adobe Reader or its equivalent is required to view the resultant document. </p>
    <div class="checkbox-control">
        <div class="row">
            <SfCheckBox @bind-Checked="@flatten" Label="Flatten annotation" TChecked="bool"></SfCheckBox>
        </div>
    </div>
    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="GeneratePDF">Create Annotations</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .radio-control {
    margin: 0 0 5% 0;
    }

    .control-section .row {
    margin: 10px 0;
    }
</style>


@code {
    bool flatten;

    /// <summary>
    /// Create and download the simple PDF document
    /// </summary>
    public async void GeneratePDF(MouseEventArgs args)
    {
        Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();
        fileData.Add("Video.mp4", await ReadData("wwwroot/data/pdf/videos.mp4"));
        fileData.Add("richmedia.jpg", await ReadData("wwwroot/data/pdf/richmedia.jpg"));       
        fileData.Add("Sound.mp3", await ReadData("wwwroot/data/pdf/sounds.mp3"));
        fileData.Add("richmedia_sound.jpg", await ReadData("wwwroot/data/pdf/richmedia-sound.jpg"));      
        fileData.Add("adventure-cycle.jpg", await ReadData("wwwroot/data/pdf/adventure-cycle.jpg"));

        AnnotationsService service = new AnnotationsService(fileData);
        MemoryStream documentStream = service.CreatePdfDocument(flatten);
        service.Close();
        SaveService saveService = new SaveService();
        saveService.SaveAndView("Annotations.pdf", "application/pdf", documentStream);
    }
    private async Task<MemoryStream> ReadData(string fileName)
    {
        using var stream = await FileSystem.OpenAppPackageFileAsync(fileName);
        MemoryStream memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        memoryStream.Position = 0;
        return memoryStream;
    }
}