@page "/pdf-viewer-2/custom-toolbar"

@using System.IO
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Microsoft.JSInterop
@using Syncfusion.Blazor.SfPdfViewer
@using Blazor_MAUI_Demos.Services

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
<PageTitle>Blazor SfPdfViewer Custom Toolbar Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Custom Toolbar in Blazor SfPdfViewer Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample showcases the core functionalities of SfPdfViewer using a custom toolbar.</p>
</SampleDescription>
<ActionDescription>
   <p>In this example, you can observe the PDF Viewer control API in action to perform various functionalities.</p>
   <ul>
        <li>Go to Previous Page - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_GoToPreviousPageAsync'>'viewer.GoToPreviousPageAsync()'</a></li>
        <li>Go to Next Page - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_GoToNextPageAsync'>'viewer.GoToNextPageAsync()'</a></li>
        <li>Go to Page - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_GoToPageAsync_System_Int32_'>'viewer.GoToPageAsync(pageindex)'</a></li>
        <li>Search Text - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_SearchTextAsync_System_String_System_Boolean'>'viewer.SearchTextAsync()'</a></li>
        <li>Search Next Text - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_SearchNextAsync'>'viewer.SearchNextAsync()'</a></li>
        <li>Search Previous Text - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_SearchPreviousAsync'>'viewer.SearchPreviousAsync()'</a></li>
        <li>Print - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_PrintAsync'>'viewer.PrintAsync()'</a></li>
        <li>Download - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_DownloadAsync'>'viewer.DownloadAsync()'</a></li>
    </ul>   
@*WASM:Block*@
@{ #if (WASM || WASM_HOSTED) }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/toolbar-customization'> documentation section</a>.</p>
@{ #endif }
@*End:WASM*@

@*Server:Block*@
@{ #if !(WASM || WASM_HOSTED) }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/toolbar-customization'> documentation section</a>.</p>
@{ #endif }
@*End:Server*@

</ActionDescription>

<div class="control-section" id="target">
     <!--Custom Toolbar-->
     <div style="display:none">
     <SfUploader @ref="@uploadFiles" ID="UploadFiles" ShowFileList="false" AllowedExtensions="@ExtensionType">
         <UploaderEvents OnUploadStart="@FileUploadSelected" Created="createdHandler"></UploaderEvents>
         <UploaderAsyncSettings SaveUrl="https://blazor.syncfusion.com/services/development/api/FileUploader/Save" RemoveUrl="https://blazor.syncfusion.com/services/development/api/FileUploader/Remove"></UploaderAsyncSettings>
     </SfUploader> 
     </div>
    <SfToolbar>
        <ToolbarEvents Clicked="@ToolbarClick" ></ToolbarEvents>
        <ToolbarItems>
            <ToolbarItem  PrefixIcon="e-icons e-folder-open" TooltipText="Open file" Id="pdfviewer_open" Align="ItemAlign.Left" CssClass="e-pv-open-document-container">
            </ToolbarItem>
            <ToolbarItem Disabled="@PreviousPageDisable" PrefixIcon="e-icons e-chevron-up" TooltipText="Previous Page" id="previousPage" Align=@ItemAlign.Center CssClass="e-pv-previous-page-navigation-container"></ToolbarItem>
            <ToolbarItem Disabled="@NextPageDisable" PrefixIcon="e-icons e-chevron-down" TooltipText="Next Page" id="nextPage" Align=@ItemAlign.Center CssClass="e-pv-next-page-navigation-container"></ToolbarItem>
           
            <ToolbarItem Type="ItemType.Input" Align="ItemAlign.Center" id="currentPageInput" TooltipText="Current page number" CssClass="e-pv-current-page-input-container">
                <Template>
                    <SfNumericTextBox @ref="CurrentPage"
                                        Max="@TotalPages"
                                        Min="0"
                                        Width="50px"
                                        TValue="int"
                                        Value="@CurrentPageNumber"
                                        ShowSpinButton=false>
                        <NumericTextBoxEvents ValueChange="GoToPage" TValue="int"></NumericTextBoxEvents>
                    </SfNumericTextBox>
                </Template>
            </ToolbarItem>
            <ToolbarItem Align="ItemAlign.Center" Id="totalPage" CssClass="e-pv-total-page-container">
                <Template>
                    <span class="e-pv-total-page">of @TotalPages</span>
                </Template>
            </ToolbarItem>
            <ToolbarItem PrefixIcon="e-icons e-search" Id="searchicon" TooltipText="Search Text" Align=@ItemAlign.Right CssClass="e-pv-search-text-container"></ToolbarItem>
            <ToolbarItem PrefixIcon="e-icons e-download" TooltipText="Download File" id="Download" Align=@ItemAlign.Right CssClass="e-pv-download-document-container"></ToolbarItem>
        </ToolbarItems>
    </SfToolbar>

    <SfTooltip OpensOn="Custom" IsSticky="true" Opened="TooltipOpen" Closed="TooltipClosed" Target="#searchicon" ID="Tooltip" @ref="Sftooltip" Position="Position.LeftBottom" OnClose="SearchClose">
   <TooltipTemplates>
       <Content>
           <div class="div">
            <SfTextBox ID="textbox" @ref="Sftextbox" Placeholder="Search Text" Created="@AddIcon" ValueChanged="@SearchText"></SfTextBox>
             </div>
            <div class="buttondiv">                 
            <SfButton id="prevbtn" CssClass="e-previous" Content="Previous" OnClick="@PreviousClick"></SfButton>
            <SfButton id="nextsearchbtn" CssClass="e-next" Content="Next" OnClick="@NextClick"></SfButton>
            </div>
            <div class="checkboxdiv">
              <input type="checkbox" @onchange="@MatchCaseChanged" style="height: 17px; width: 17px;"/>
              <span style="position: absolute; padding-top: 3px; padding-left: 8px; padding-right: 8px; font-size: 13px">Match case</span>
            </div>
       </Content>
    </TooltipTemplates>
</SfTooltip>

<div class="magnification-toolbar" id="toolbar">
<SfToolbar>
    <ToolbarEvents Clicked="@ToolbarClick" ></ToolbarEvents>
        <ToolbarItems>
            <ToolbarItem PrefixIcon="e-icons e-zoom-to-fit" Id="fitpage" TooltipText="Fit Page" Align=@ItemAlign.Left CssClass="e-pv-fit-page-container"></ToolbarItem>
            <ToolbarItem PrefixIcon="e-icons e-circle-add" Id="zoomin" TooltipText="Zoom In" Align=@ItemAlign.Left CssClass="e-pv-zoom-in-container"></ToolbarItem>
            <ToolbarItem PrefixIcon="e-icons e-circle-remove" Id="zoomout" TooltipText="Zoom Out" Align=@ItemAlign.Left CssClass="e-pv-zoom-out-container"></ToolbarItem>
        </ToolbarItems>
    </SfToolbar>
</div>


     <SfPdfViewer2 @ref="Viewer" DocumentPath="@DocumentPath" EnableToolbar="false" EnableAnnotationToolbar="false" EnableNavigationToolbar="false" Height="640px" Width="100%">
     <PdfViewerEvents DocumentLoaded="@DocumentLoaded" PageChanged="@OnPageChanged" DownloadEnd="@DownloadEndEvent" ExportSucceed="@ExportSuccessEvent"></PdfViewerEvents>
     </SfPdfViewer2>

</div>

@code {

    private string DocumentPath { get; set; } = "";
    SfPdfViewer2 Viewer;
    private bool exportSuccess { get; set; } = false;
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        #if MAUI 
        string basePath = "Blazor_MAUI_Demos.wwwroot.data.pdfviewer2.hive-succinctly.pdf";
        Stream DocumentStream = this.GetType().Assembly.GetManifestResourceStream(basePath);
        DocumentStream.Position = 0;
        using (MemoryStream memoryStream = new MemoryStream())
        {
            DocumentStream.CopyTo(memoryStream);
            byte[] bytes = memoryStream.ToArray();
            string base64String = Convert.ToBase64String(bytes);
            string base64prefix = "data:application/pdf;base64,";
            //Assigned the base64 path to the PDF document path.
            DocumentPath = $"{base64prefix}{base64String}";
        }
#endif
        //End:Hidden
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;

@*Server:Block*@
#if !(WASM || WASM_HOSTED || MAUI)
        //Sets the PDF document path for initial loading.
        DocumentPath = "wwwroot/data/pdfviewer2/hive_succinctly.pdf";
#endif
@*End:Server*@

@*WebAssembly:Block*@    
#if (WASM || WASM_HOSTED)
        //Sets the PDF document path for initial loading.   
        DocumentPath= fileDataPath + "data/pdfviewer2/hive-succinctly.pdf";
#endif
@*End:WebAssembly*@
    }
   
    #region binded values
    SfTooltip Sftooltip;
    SfTextBox Sftextbox;
    SfUploader uploadFiles;
    private string ExtensionType = "application/*";
    public bool PreviousPageDisable = true;
    public bool NextPageDisable = true;
    public bool PrintDisabled = true;
    public bool DownloadDisabled = true;
    SfNumericTextBox<int> CurrentPage;
    public int TotalPages { get; set; } = 0;
    public int CurrentPageNumber = 0;
    public bool IsChecked { get; set; } = false;
    public string Text = "";
    private bool isToolTipOpened = false;
    #endregion

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden

    public async Task createdHandler()
    {
       await JSRuntime.InvokeVoidAsync("created");
    }

    //Triggers while loading document in to the PDFViewer.
    private void DocumentLoaded(LoadEventArgs args)
    {
        TotalPages = Viewer.PageCount;
        CurrentPageNumber = Viewer.CurrentPageNumber;
        NextPageDisable = false;
        if(TotalPages == 1)
        {
            PreviousPageDisable = true;
            NextPageDisable = true;
        }
    }

    //Triggers when the textbox is created.
    private async void AddIcon()
    {
       await this.Sftextbox.AddIconAsync("append", "e-icons e-search");
    }

    //Triggers when the search tooltip close.
    public async void SearchClose()
    {
        await Viewer.CancelTextSearchAsync();
        Text = "";
    }

    //Triggers when match case checkbox is clicked.
    private async void MatchCaseChanged(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        IsChecked = (bool)args.Value;
        if (!IsChecked)
        {
            //Searches the target text in the PDF document and highlights the occurrences in the PDF pages.
            await Viewer.SearchTextAsync(Text, false);
        }
        else
        {
            await Viewer.SearchTextAsync(Text, true); 
        }
    }

    //Triggers when search icon is clicked.
    private async void SearchText(string args)
    {
        Text = args;
        if (IsChecked)
        {
            //Searches the target text in the PDF document and highlights the occurrences in the PDF pages.
            await Viewer.SearchTextAsync(args, true);
        }
        else
        {
            await Viewer.SearchTextAsync(args, false);
        }
    }

    //Triggers when next button is clicked.
    private async void NextClick()
    {
        //Searches the next occurrence of the searched text from the current occurrence of the SfPdfViewer.
        await Viewer.SearchNextAsync();
    }

    //Triggers when previous button is clicked.
    private async void PreviousClick()
    {
        //Searches the previous occurrence of the searched text from the current occurrence of the SfPdfViewer.
        await Viewer.SearchPreviousAsync();
    }

    //Triggers when changes occur in uploaded file list by selecting or dropping files.
    public async Task FileUploadSelected(UploadingEventArgs args)
    {
        if (args.FileData.Type == "pdf")
        {
            string base64string = args.FileData.RawFile.ToString();
            //Loads the PDF docuent from the given base64 string in the SfPdfViewer.
            await Viewer.LoadAsync(base64string, null);
            await uploadFiles.ClearAllAsync();
        }
    }

    //Triggers when the value of the numeric textbox changes.
    public async void GoToPage(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        int currentValue = args.Value;
        if (args.Event != null)
        {
            var changeEventArgs = args.Event as Microsoft.AspNetCore.Components.ChangeEventArgs;
            if (changeEventArgs != null && changeEventArgs.Value != null)
            {
                currentValue = int.Parse(changeEventArgs.Value.ToString());
            }
        }
        if (currentValue == args.Value && args.Value != 0)
        {
            CurrentPageNumber = args.Value;
            //Navigate to given page number in loaded document of the PDFViewer2.
            await Viewer.GoToPageAsync(args.Value);
        }
        else
        {
            CurrentPageNumber = Viewer.CurrentPageNumber;
        }
    }

    //Triggers when there is change in the current page number.
    private void OnPageChanged(PageChangeEventArgs args)
    {
        CurrentPageNumber = (int)args.CurrentPageNumber;
        if (args.CurrentPageNumber == TotalPages)
        {
            NextPageDisable = true;
            PreviousPageDisable = false;
        }
        if (args.CurrentPageNumber < TotalPages && args.CurrentPageNumber != 1)
        {
            PreviousPageDisable = false;
            NextPageDisable = false;
        }
        if (args.CurrentPageNumber == 1)
        {
            NextPageDisable = false;
            PreviousPageDisable = true;
        }
    }

    private async Task TooltipOpen()
    {
        await JSRuntime.InvokeVoidAsync("mapSearchValue", Viewer.ID);
        isToolTipOpened = true;
    }
    private void TooltipClosed()
    {
        isToolTipOpened = false;
    }

    //This method will get invoked while clicking the toolbar items.
    public async void ToolbarClick(ClickEventArgs args)
    {
        if (args.Item != null)
        {
            if(isToolTipOpened)
            {
                await Sftooltip.CloseAsync();
            }
            switch (args.Item.CssClass)
            {
                case "e-pv-previous-page-navigation-container":
                    //Navigate to previous page of the PDF document loaded in the PDFViewer2.
                    await Viewer.GoToPreviousPageAsync();                    
                    NextPageDisable = false;
                    break;
                case "e-pv-next-page-navigation-container":
                    //Navigate to next page of the PDF document loaded in the PDFViewer2.
                    await Viewer.GoToNextPageAsync();
                    PreviousPageDisable = false;
                    break;           
                case "e-pv-print-document-container":
                    //Print the PDF document being loaded in the PDFViewer2.
                    await Viewer.PrintAsync();
                    break;
                case "e-pv-download-document-container":
                    //Downloads the PDF document being loaded in the PDFViewer2.
                    await Viewer.DownloadAsync();
                    break;
                case "e-pv-zoom-in-container":
                    //Zoom in  the PDF document being loaded in the PDFViewer2.
                    await Viewer.ZoomInAsync();
                    break;
                case "e-pv-zoom-out-container":
                    //Zoom out the PDF document being loaded in the PDFViewer2.
                    await Viewer.ZoomOutAsync();
                    break;
                case "e-pv-fit-page-container":
                    //Fit page the PDF document being loaded in the PDFViewer2.
                    await Viewer.FitToPageAsync();
                    break;
                case "e-pv-search-text-container":
                    if(isToolTipOpened)
                    {
                        await Sftooltip.CloseAsync();
                    }
                    else
                    {
                        await Sftooltip.OpenAsync();
                    }
                    isToolTipOpened = !isToolTipOpened;
                    break;
            }
        }
    }
    private void DownloadEndEvent(DownloadEndEventArgs downloadEndEvent)
    {
         string bas64string = downloadEndEvent.DownloadDocument.Replace("data:application/pdf;base64,", "");
         byte[] bytes = Convert.FromBase64String(bas64string);
         SaveService saveService = new();
         saveService.SaveAndView(downloadEndEvent.FileName, "application/pdf", new MemoryStream(bytes));
    }

    private async void ExportSuccessEvent(ExportSuccessEventArgs exportSuccessEvent)
    {
        if (!exportSuccess)
        {
            exportSuccess = true;
            Stream exportStream = new MemoryStream();
            string type = exportSuccessEvent.FileName.EndsWith("xfdf") ? "xfdf" : "json";
            if (type == "xfdf")
            {
                exportStream = await Viewer.ExportAnnotationAsStreamAsync(AnnotationDataFormat.Xfdf);
            }
            else
            {
                exportStream = await Viewer.ExportAnnotationAsStreamAsync(AnnotationDataFormat.Json);
            }
            exportSuccess = false;
            exportStream.Position = 0;
            MemoryStream newMemoryStream = new MemoryStream();
            exportStream.CopyTo(newMemoryStream);
            newMemoryStream.Position = 0;
            SaveService saveService = new();
            saveService.SaveAndView(exportSuccessEvent.FileName, "application/" + type, newMemoryStream);
        }
    }
}

@*Hidden:Lines*@
<!--Style for custom toolbar-->
<style>
    .e-previous {
        width: 48%;    
    }

    .e-next {
        width: 48%;
        margin-left:4px;
    }

    .div{
        padding-top: 10px;
    }

    .buttondiv{
        padding-top: 10px;
        width:100%;
    }

    .checkboxdiv
    {
        padding-top: 10px;
        padding-left: 2px;
        text-align: left;
    }

    .e-pv-current-page-number {
        width: 46px;
        height: 28px;
        text-align: center;
    }

    .material .e-pv-current-page-number {
        border-width: 1px;
    }

    .e-pv-total-page-container {
        margin-left: 6px;
    }

    .magnification-toolbar{
        background: transparent;
        height: auto;
        min-height: 56px;
        border: none;
        position: absolute;
        z-index: 1001;
        bottom: 80px;
        right: 16px;
        transform: rotate(90deg);
    }

    .magnification-toolbar .e-toolbar{
        background: transparent !important;
        border: none;
        box-shadow: none !important;
    }

    .magnification-toolbar .e-toolbar .e-toolbar-items{
        background: transparent !important;
    }

    .magnification-toolbar .e-toolbar .e-tbar-btn {
        min-height: 30px;
        min-width: 30px;
        border: 1px solid #c8c8c8;
    }

    .magnification-toolbar .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn {
        border-radius: 30px;
    }

    .magnification-toolbar .e-toolbar .e-toolbar-items .e-toolbar-item .e-tbar-btn.e-btn {
        min-height: 35px;
        min-width: 35px;
    }
    
    #fitpage{
        margin-right: 4px;
    }
   
    #zoomin{
        margin-right: 4px;
    }

    #zoomout{
        margin-right: 4px;
    }
    .e-pv-zoom-out-container button {
         transform: rotate(90deg);
    }
</style>
@*End:Hidden*@