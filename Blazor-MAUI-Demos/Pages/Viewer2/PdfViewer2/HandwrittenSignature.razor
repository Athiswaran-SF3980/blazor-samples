@page "/pdf-viewer-2/handwritten-signature"
@using Syncfusion.Blazor.SfPdfViewer
@using Blazor_MAUI_Demos.Services
@using System.IO

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
<PageTitle>Blazor SfPdfViewer Handwritten Signature Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Handwritten Signature in Blazor SfPdfViewer Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the Handwritten signature support of SfPdfViewer. Handwritten signatures help reduce paperwork in reviewing content and provide digital verification.</p>
</SampleDescription>
<ActionDescription>
    <p>In the SfPdfViewer component, we can explicitly open the Handwritten signature dialog using the method <code>SetAnnotationMode</code>.</p>
@*WASM:Block*@
@{ #if (WASM || WASM_HOSTED) }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/getting-started/web-assembly-application'> documentation section</a>.</p>
@{ #endif }
@*End:WASM*@

@*Server:Block*@
@{ #if !(WASM || WASM_HOSTED) }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/getting-started/server-side-application'> documentation section</a>.</p>
@{ #endif }
@*End:Server*@
</ActionDescription>

<div class="control-section">
     <SfPdfViewer2 @ref="Viewer" DocumentPath="@DocumentPath" Height="640px" Width="100%">
        <PdfViewerEvents DocumentLoaded="DocumentLoad" DownloadEnd="@DownloadEndEvent" ExportSucceed="@ExportSuccessEvent"></PdfViewerEvents>
    </SfPdfViewer2>
</div>

@code {
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden

    private string DocumentPath { get; set; } = "";
    SfPdfViewer2 Viewer;
    private bool exportSuccess { get; set; } = false;
    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        #if MAUI 
        string basePath = "Blazor_MAUI_Demos.wwwroot.data.pdfviewer2.hand-written-signature.pdf";
        Stream DocumentStream = this.GetType().Assembly.GetManifestResourceStream(basePath);
        DocumentStream.Position = 0;
        using (MemoryStream memoryStream = new MemoryStream())
        {
            DocumentStream.CopyTo(memoryStream);
            byte[] bytes = memoryStream.ToArray();
            string base64String = Convert.ToBase64String(bytes);
            string base64prefix = "data:application/pdf;base64,";
            //Assigned the base64 path to the PDF document path.
            DocumentPath = $"{base64prefix}{base64String}";
        }
#endif
        //End:Hidden
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;

@*Server:Block*@
#if !(WASM || WASM_HOSTED || MAUI)
        //Sets the PDF document path for initial loading.
        DocumentPath = "wwwroot/data/pdfviewer2/hand-written-signature.pdf";
#endif
@*End:Server*@

@*WebAssembly:Block*@    
#if (WASM || WASM_HOSTED)
        //Sets the PDF document path for initial loading.   
        DocumentPath= fileDataPath + "data/pdfviewer2/hand-written-signature.pdf";
#endif
@*End:WebAssembly*@
    }
 
    public async void DocumentLoad(LoadEventArgs args)
    {
        await Viewer.SetAnnotationModeAsync(AnnotationType.HandWrittenSignature);
    }

    private void DownloadEndEvent(DownloadEndEventArgs downloadEndEvent)
    {
         string bas64string = downloadEndEvent.DownloadDocument.Replace("data:application/pdf;base64,", "");
         byte[] bytes = Convert.FromBase64String(bas64string);
         SaveService saveService = new();
         saveService.SaveAndView(downloadEndEvent.FileName, "application/pdf", new MemoryStream(bytes));
    }

    private async void ExportSuccessEvent(ExportSuccessEventArgs exportSuccessEvent)
    {
        if (!exportSuccess)
        {
            exportSuccess = true;
            Stream exportStream = new MemoryStream();
            string type = exportSuccessEvent.FileName.EndsWith("xfdf") ? "xfdf" : "json";
            if (type == "xfdf")
            {
                exportStream = await Viewer.ExportAnnotationAsStreamAsync(AnnotationDataFormat.Xfdf);
            }
            else
            {
                exportStream = await Viewer.ExportAnnotationAsStreamAsync(AnnotationDataFormat.Json);
            }
            exportSuccess = false;
            exportStream.Position = 0;
            MemoryStream newMemoryStream = new MemoryStream();
            exportStream.CopyTo(newMemoryStream);
            newMemoryStream.Position = 0;
            SaveService saveService = new();
            saveService.SaveAndView(exportSuccessEvent.FileName, "application/" + type, newMemoryStream);
        }
    }
}