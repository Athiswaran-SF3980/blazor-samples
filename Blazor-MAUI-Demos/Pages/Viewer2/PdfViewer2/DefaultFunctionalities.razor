@page "/pdf-viewer-2/default-functionalities"
@using Syncfusion.Blazor.SfPdfViewer
@using Blazor_MAUI_Demos.Services
@using System.IO

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
<PageTitle>Blazor SfPdfViewer Default Functionalities Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Default Functionalities in Blazor SfPdfViewer Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample explains the core features of SfPdfViewer such as PDF viewing, printing, navigation, text search and selection, zooming, panning, reviewing, and more with their built-in toolbar.</p>
</SampleDescription>
<ActionDescription>
    <p>The SfPdfViewer component allows you to view, review, and print the PDF files. This sample explains the following key features of SfPdfViewer:</p>
    <ul>
        <li>View the PDF document.</li>
        <li>Core interactions such as scrolling, zooming, panning, and page navigation.</li>
        <li>Annotations such as TextMarkup, Shape, Measure, Stamp, and Free Text.</li>
        <li>Built-in toolbar.</li>
        <li>Select and copy text from a PDF file.</li>
        <li>Search a text easily across a PDF document.</li>
        <li>Easy navigation with the help of Bookmarks, thumbnails, hyperlinks, and table of contents.</li>
        <li>View modes such as fit to page and fit to width.</li>
        <li>Print the entire document or a specific page directly from the browser.</li>
    </ul>   
    <p>In this demo, the SfPdfViewer is rendered with a default PDF file.</p>
    @*WASM:Block*@
    @{ #if (WASM || WASM_HOSTED) }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/getting-started/web-assembly-application'> documentation section</a>.</p>
@{ #endif }
    @*End:WASM*@

    @*Server:Block*@
    @{ #if !(WASM || WASM_HOSTED) }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/getting-started/server-side-application'> documentation section</a>.</p>
    @{ #endif }
    @*End:Server*@

</ActionDescription>

<div class="control-section">
    <SfPdfViewer2 @ref="@Viewer" DocumentPath="@DocumentPath" Height="640px" Width="100%">
        <PdfViewerEvents DownloadEnd="@DownloadEndEvent" ExportSucceed="@ExportSuccessEvent"></PdfViewerEvents>
    </SfPdfViewer2>
</div>

@code {

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden

    private SfPdfViewer2 Viewer { get; set; }
    private string DocumentPath { get; set; } = "";
    private bool exportSuccess { get; set; } = false;

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        string basePath = "Blazor_MAUI_Demos.wwwroot.data.pdfviewer2.pdf-succinctly.pdf";
        Stream DocumentStream = this.GetType().Assembly.GetManifestResourceStream(basePath);
        DocumentStream.Position = 0;
        using (MemoryStream memoryStream = new MemoryStream())
        {
            DocumentStream.CopyTo(memoryStream);
            byte[] bytes = memoryStream.ToArray();
            string base64String = Convert.ToBase64String(bytes);
            string base64prefix = "data:application/pdf;base64,";
            //Assigned the base64 path to the PDF document path.
            DocumentPath = $"{base64prefix}{base64String}";
        }
        //End:Hidden
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;

        @*Server:Block*@
#if !(WASM || WASM_HOSTED || MAUI)
        //Sets the PDF document path for initial loading.
        DocumentPath = "wwwroot/data/pdfviewer2/pdf-succinctly.pdf";
#endif
        @*End:Server*@

        @*WebAssembly:Block*@
#if (WASM || WASM_HOSTED)
    //Sets the PDF document path for initial loading.
    DocumentPath= fileDataPath + "data/pdfviewer2/pdf-succinctly.pdf";
#endif
        @*End:WebAssembly*@
    }

    private void DownloadEndEvent(DownloadEndEventArgs downloadEndEvent)
    {
        string bas64string = downloadEndEvent.DownloadDocument.Replace("data:application/pdf;base64,", "");
        byte[] bytes = Convert.FromBase64String(bas64string);
        SaveService saveService = new();
        saveService.SaveAndView(downloadEndEvent.FileName, "application/pdf", new MemoryStream(bytes));
    }

    private async void ExportSuccessEvent(ExportSuccessEventArgs exportSuccessEvent)
    {
        if (!exportSuccess)
        {
            exportSuccess = true;
            Stream exportStream = new MemoryStream();
            string type = exportSuccessEvent.FileName.EndsWith("xfdf") ? "xfdf" : "json";
            if (type == "xfdf")
            {
                exportStream = await Viewer.ExportAnnotationAsStreamAsync(AnnotationDataFormat.Xfdf);
            }
            else
            {
                exportStream = await Viewer.ExportAnnotationAsStreamAsync(AnnotationDataFormat.Json);
            }
            exportSuccess = false;
            exportStream.Position = 0;
            MemoryStream newMemoryStream = new MemoryStream();
            exportStream.CopyTo(newMemoryStream);
            newMemoryStream.Position = 0;
            SaveService saveService = new();
            saveService.SaveAndView(exportSuccessEvent.FileName, "application/" + type, newMemoryStream);
        }
    }
}