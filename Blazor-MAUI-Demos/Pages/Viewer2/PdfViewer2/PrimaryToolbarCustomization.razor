@page "/pdf-viewer-2/primary-toolbar-customization"

@using System.IO
@inject IJSRuntime JSRuntime
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Buttons
@using Microsoft.JSInterop
@using Syncfusion.Blazor.SfPdfViewer
@using Blazor_MAUI_Demos.Services

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
<PageTitle>Blazor SfPdfViewer Custom Toolbar Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Custom Toolbar in Blazor SfPdfViewer Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>In this example, observe the modification of default toolbar item positions, along with the ability to show or hide specific toolbar items as required.</p>
</SampleDescription>
<ActionDescription>
   <p>Witness the capabilities of the PDF Viewer control API in action as it empowers users to execute various functions:</p>
   <ul>
        <li>Navigate to the Previous Page - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_GoToPreviousPageAsync'>'viewer.GoToPreviousPageAsync()'</a></li>
        <li>Navigate to the Next Page - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_GoToNextPageAsync'>'viewer.GoToNextPageAsync()'</a></li>
        <li>Jump to a Specific Page - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_GoToPageAsync_System_Int32_'>'viewer.GoToPageAsync(pageindex)'</a></li>
       <li>Download the Document - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_DownloadAsync'>'viewer.DownloadAsync()'</a></li>
        <li>Zoom In - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_ZoomInAsync'>'viewer.DownloadAsync()'</a></li>
        <li>Zoom Out - <a href='https://help.syncfusion.com/cr/blazor/Syncfusion.Blazor.PdfViewer.PdfViewerBase.html#Syncfusion_Blazor_PdfViewer_PdfViewerBase_ZoomOutAsync'>'viewer.DownloadAsync()'</a></li>
    </ul>   
@*WASM:Block*@
@{ #if (WASM || WASM_HOSTED) }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/toolbar-customization'> documentation section</a>.</p>
@{ #endif }
@*End:WASM*@

@*Server:Block*@
@{ #if !(WASM || WASM_HOSTED) }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/toolbar-customization'> documentation section</a>.</p>
@{ #endif }
@*End:Server*@

</ActionDescription>
<div class="control-section col-lg-12">
    <div class="col-lg-10 show-background">
        <SfPdfViewer2 @ref="Viewer" DocumentPath="@DocumentPath" Height="640px" Width="100%" ID="pdfviewer">
            <PdfViewerToolbarSettings CustomToolbarItems="@CustomToolbarItems" ToolbarItems="null" MobileToolbarItems="null" />
            <PdfViewerEvents DocumentLoaded="@DocumentLoaded" ToolbarClicked="@ClickAction" PageChanged="@OnPageChanged" DownloadEnd="@DownloadEndEvent" ExportSucceed="@ExportSuccessEvent"></PdfViewerEvents>
        </SfPdfViewer2>
    </div>
    <button id="toggle-button" onclick="togglePropertySection()">
    <svg width="22" height="16" viewBox="0 0 22 16" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M13.9531 12.1719H20.8438L20.9844 12.1953L21.125 12.2422L21.2656 12.3125L21.3594 12.4062L21.4531 12.5L21.5234 12.6406L21.5703 12.7812L21.5938 12.9219L21.5703 13.0625L21.5234 13.2031L21.4531 13.3438L21.3594 13.4375L21.2656 13.5312L21.125 13.6016L20.9844 13.6484L20.8438 13.6719H13.9531L13.8125 13.6484L13.6719 13.6016L13.5312 13.5312L13.4375 13.4375L13.3438 13.3438L13.2734 13.2031L13.2266 13.0625L13.2031 12.9219L13.2266 12.7812L13.2734 12.6406L13.3438 12.5L13.4375 12.4062L13.5312 12.3125L13.6719 12.2422L13.8125 12.1953L13.9531 12.1719ZM8.04688 11.7031H7.92969L7.78906 11.7266L7.57812 11.7969L7.36719 11.8906L7.17969 12.0547L7.01562 12.2422L6.92188 12.4531L6.85156 12.6641L6.82812 12.9219L6.85156 13.1797L6.92188 13.3906L7.01562 13.6016L7.17969 13.7891L7.36719 13.9531L7.57812 14.0469L7.78906 14.1172L8.04688 14.1406L8.30469 14.1172L8.51562 14.0469L8.72656 13.9531L8.91406 13.7891L9.07812 13.6016L9.17188 13.3906L9.24219 13.1797L9.26562 12.9219L9.24219 12.6641L9.17188 12.4531L9.07812 12.2422L8.91406 12.0547L8.72656 11.8906L8.51562 11.7969L8.30469 11.7266L8.04688 11.7031ZM8.04688 10.2031L8.32812 10.2266L8.58594 10.2734L8.84375 10.3438L9.10156 10.4375L9.33594 10.5312L9.57031 10.6719L9.75781 10.8359L9.96875 11L10.1328 11.2109L10.2969 11.3984L10.4375 11.6328L10.5312 11.8672L10.625 12.125L10.6953 12.3828L10.7422 12.6406L10.7656 12.9219L10.7422 13.2031L10.6953 13.4609L10.625 13.7188L10.5312 13.9766L10.4375 14.2109L10.2969 14.4453L10.1328 14.6328L9.96875 14.8438L9.75781 15.0078L9.57031 15.1719L9.33594 15.3125L9.10156 15.4062L8.84375 15.5L8.58594 15.5703L8.32812 15.6172L8.04688 15.6406L7.8125 15.6172L7.60156 15.5938L7.39062 15.5469L7.17969 15.4766L6.96875 15.4062L6.78125 15.3125L6.59375 15.2188L6.42969 15.1016L6.26562 14.9609L6.10156 14.8203L5.96094 14.6562L5.84375 14.4922L5.72656 14.3047L5.63281 14.1172L5.53906 13.9297L5.44531 13.6719H1.15625L1.01562 13.6484L0.875 13.6016L0.734375 13.5312L0.640625 13.4375L0.546875 13.3438L0.476562 13.2031L0.429688 13.0625L0.40625 12.9219L0.429688 12.7812L0.476562 12.6406L0.546875 12.5L0.640625 12.4062L0.734375 12.3125L0.875 12.2422L1.01562 12.1953L1.15625 12.1719H5.44531L5.53906 11.9141L5.63281 11.7266L5.72656 11.5391L5.84375 11.3516L5.96094 11.1875L6.10156 11.0234L6.26562 10.8828L6.42969 10.7422L6.59375 10.625L6.78125 10.5312L6.96875 10.4375L7.17969 10.3672L7.39062 10.2969L7.60156 10.25L7.8125 10.2266L8.04688 10.2031ZM1.15625 2.32812H8.04688L8.1875 2.35156L8.32812 2.39844L8.46875 2.46875L8.5625 2.5625L8.65625 2.65625L8.72656 2.79688L8.77344 2.9375L8.79688 3.07812L8.77344 3.21875L8.72656 3.35938L8.65625 3.5L8.5625 3.59375L8.46875 3.6875L8.32812 3.75781L8.1875 3.80469L8.04688 3.82812H1.15625L1.01562 3.80469L0.875 3.75781L0.734375 3.6875L0.640625 3.59375L0.546875 3.5L0.476562 3.35938L0.429688 3.21875L0.40625 3.07812L0.429688 2.9375L0.476562 2.79688L0.546875 2.65625L0.640625 2.5625L0.734375 2.46875L0.875 2.39844L1.01562 2.35156L1.15625 2.32812ZM13.9531 1.85938H13.8359L13.6953 1.88281L13.4844 1.95312L13.2734 2.04688L13.0859 2.21094L12.9219 2.39844L12.8281 2.60938L12.7578 2.82031L12.7344 3.07812L12.7578 3.33594L12.8281 3.54688L12.9219 3.75781L13.0859 3.94531L13.2734 4.10938L13.4844 4.20312L13.6953 4.27344L13.9531 4.29688L14.2109 4.27344L14.4219 4.20312L14.6328 4.10938L14.8203 3.94531L14.9844 3.75781L15.0781 3.54688L15.1484 3.33594L15.1719 3.07812L15.1484 2.82031L15.0781 2.60938L14.9844 2.39844L14.8203 2.21094L14.6328 2.04688L14.4219 1.95312L14.2109 1.88281L13.9531 1.85938ZM13.9531 0.359375L14.1875 0.382812L14.3984 0.40625L14.6094 0.453125L14.8203 0.523438L15.0312 0.59375L15.2188 0.6875L15.4062 0.78125L15.5703 0.898438L15.7344 1.03906L15.8984 1.17969L16.0391 1.34375L16.1562 1.50781L16.2734 1.69531L16.3672 1.88281L16.4609 2.07031L16.5547 2.35156H20.8438H20.9844L21.125 2.39844L21.2656 2.46875L21.3594 2.5625L21.4531 2.65625L21.5234 2.79688L21.5703 2.9375L21.5938 3.07812L21.5703 3.21875L21.5234 3.35938L21.4531 3.5L21.3594 3.59375L21.2656 3.6875L21.125 3.75781L20.9844 3.80469L20.8438 3.82812H16.5547L16.4609 4.08594L16.3672 4.27344L16.2734 4.46094L16.1562 4.64844L16.0391 4.8125L15.8984 4.97656L15.7344 5.11719L15.5703 5.25781L15.4062 5.375L15.2188 5.46875L15.0312 5.5625L14.8203 5.63281L14.6094 5.70312L14.3984 5.75L14.1875 5.77344L13.9531 5.79688L13.6719 5.77344L13.4141 5.72656L13.1562 5.65625L12.8984 5.5625L12.6641 5.46875L12.4297 5.32812L12.2422 5.16406L12.0312 5L11.8672 4.78906L11.7031 4.60156L11.5625 4.36719L11.4688 4.13281L11.375 3.875L11.3047 3.61719L11.2578 3.35938L11.2344 3.07812L11.2578 2.79688L11.3047 2.53906L11.375 2.28125L11.4688 2.02344L11.5625 1.78906L11.7031 1.55469L11.8672 1.36719L12.0312 1.15625L12.2422 0.992188L12.4297 0.828125L12.6641 0.6875L12.8984 0.59375L13.1562 0.5L13.4141 0.429688L13.6719 0.382812L13.9531 0.359375Z" fill="white" />
    </svg>
</button>
    <div class="col-lg-2">
        <div class='content property-section' id="property-section">
            <div class="property-panel-section">
            <div class="content-wrapper" style="margin-top:20px;margin-left:30px">
                <div class="heading-section">
                    <h5><b>Select Toolbar Items</b></h5>
                </div>
                <div class="property-panel-content">
                <svg onclick="togglePropertySection()" role="button" tabindex="0" aria-label="Toggle settings" title='Toggle Settings' id="close-settings" width="14" height="14" viewBox="0 0 14 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.25781 0.4375H1.33594L1.49219 0.476562L1.64844 0.535156L1.78516 0.613281L7 5.84766L12.2148 0.613281L12.3516 0.535156L12.5078 0.476562L12.6641 0.4375H12.8203L12.9766 0.476562L13.1328 0.535156L13.2695 0.613281L13.3867 0.730469L13.4648 0.867188L13.5234 1.02344L13.5625 1.17969V1.33594L13.5234 1.49219L13.4648 1.64844L13.3867 1.78516L8.15234 7L13.3867 12.2148L13.4648 12.3516L13.5234 12.5078L13.5625 12.6641V12.8203L13.5234 12.9766L13.4648 13.1328L13.3867 13.2695L13.2695 13.3867L13.1328 13.4648L12.9766 13.5234L12.8203 13.5625H12.6641L12.5078 13.5234L12.3516 13.4648L12.2148 13.3867L7 8.15234L1.78516 13.3867L1.64844 13.4648L1.49219 13.5234L1.33594 13.5625H1.17969L1.02344 13.5234L0.867188 13.4648L0.730469 13.3867L0.613281 13.2695L0.535156 13.1328L0.476562 12.9766L0.4375 12.8203V12.6641L0.476562 12.5078L0.535156 12.3516L0.613281 12.2148L5.84766 7L0.671875 1.84375L0.574219 1.70703L0.496094 1.57031L0.457031 1.41406L0.4375 1.25781L0.457031 1.10156L0.496094 0.945312L0.574219 0.808594L0.671875 0.671875L0.808594 0.574219L0.945312 0.496094L1.10156 0.457031L1.25781 0.4375Z" fill="#424242" />
                </svg>
                <div class="control-styles">
                    <SfMultiSelect @ref="multiSelect" @bind-Value="@SelectItems" TItem="string" TValue="string[]" Placeholder="Select toolbar items" Mode="@VisualMode.CheckBox" DataSource="@Items" ShowSelectAll="true" EnableSelectionOrder="true" ShowDropDownIcon="true" FilterBarPlaceholder="Search toolbar items" PopupHeight="200px">
                    </SfMultiSelect>
                </div><br>
                <div class="evtbtn" style="padding-bottom: 10px">
                    <SfButton @onclick="Customize">Customize</SfButton>
                </div>
            </div>
        </div>
        </div>
        </div>
    </div>
</div>
@code {

    private string DocumentPath { get; set; } = "";
    SfPdfViewer2 Viewer;
    private bool exportSuccess { get; set; } = false;
    SfMultiSelect<String[], string> multiSelect;
    protected override void OnInitialized()
    {
        AddCustomToolbarItems();
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        #if MAUI 
        string basePath = "Blazor_MAUI_Demos.wwwroot.data.pdfviewer2.hive-succinctly.pdf";
        Stream DocumentStream = this.GetType().Assembly.GetManifestResourceStream(basePath);
        DocumentStream.Position = 0;
        using (MemoryStream memoryStream = new MemoryStream())
        {
            DocumentStream.CopyTo(memoryStream);
            byte[] bytes = memoryStream.ToArray();
            string base64String = Convert.ToBase64String(bytes);
            string base64prefix = "data:application/pdf;base64,";
            //Assigned the base64 path to the PDF document path.
            DocumentPath = $"{base64prefix}{base64String}";
        }
#endif
        //End:Hidden
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;

@*Server:Block*@
#if !(WASM || WASM_HOSTED || MAUI)
        //Sets the PDF document path for initial loading.
        DocumentPath = "wwwroot/data/pdfviewer2/hive_succinctly.pdf";
#endif
@*End:Server*@

@*WebAssembly:Block*@    
#if (WASM || WASM_HOSTED)
        //Sets the PDF document path for initial loading.   
        DocumentPath= fileDataPath + "data/pdfviewer2/hive-succinctly.pdf";
#endif
@*End:WebAssembly*@
    }
   
    #region binded values
     private bool PreviousPageDisable = true;
    private bool NextPageDisable = true;
    private SfNumericTextBox<int> CurrentPage;
    private int TotalPages { get; set; }
    private int CurrentPageNumber;
    private List<PdfToolbarItem> CustomToolbarItems = new List<PdfToolbarItem>();
    private bool OpenVisible = true;
    private bool PreVisible = true;
    private bool NextVisible = true;
    private bool ZoomInVisible = true;
    private bool PageNumberVisible = true;
    private bool ZoomOutVisible = true;
    private bool PrintVisible = true;
    private bool DownloadVisible = true;
    private bool AnnotationVisible = true;
    private bool SearchVisible = true;
    string[] Items = new string[9] { "Open", "Previous Page", "Next Page", "Page Number", "Zoom In", "Zoom Out", "Edit Annotation", "Text Search", "Download" };
    string[] SelectItems = new string[] { "Open", "Previous Page", "Next Page", "Page Number", "Zoom In", "Zoom Out", "Edit Annotation", "Text Search", "Download" };
    #endregion

    // Method for Customize the List of the Selected Item to change the visibility of Toolbar Items
    public void Customize()
    {
        SelectItems = multiSelect.Value;
        ChangeVisibilty(SelectItems);
    }

    // Method to change the Visibility Boolean of the All Toolbar Items
    public void ChangeVisibilty(string[] Items)
    {
        if (Items != null)
        {
            PreVisible = Items.Contains("Previous Page") ? true : false;
            OpenVisible = Items.Contains("Open") ? true : false;
            NextVisible = Items.Contains("Next Page") ? true : false;
            DownloadVisible = Items.Contains("Download") ? true : false;
            PageNumberVisible = Items.Contains("Page Number") ? true : false;
            ZoomInVisible = Items.Contains("Zoom In") ? true : false;
            ZoomOutVisible = Items.Contains("Zoom Out") ? true : false;
            AnnotationVisible = Items.Contains("Edit Annotation") ? true : false;
            SearchVisible = Items.Contains("Text Search") ? true : false;
        }
        else
        {
            PreVisible = OpenVisible = NextVisible = DownloadVisible = PageNumberVisible = ZoomInVisible = ZoomOutVisible = AnnotationVisible = SearchVisible = false;
        }
    }
    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden

    public async Task createdHandler()
    {
       await JSRuntime.InvokeVoidAsync("created");
    }

    // Method to render the Template for the CustomToolbarItems
     private RenderFragment GetTemplate(string templatename)
    {
        return __builder =>
        {
            if (templatename == "PreviousPage")
            {
                <ToolbarItem Text="Previous Page" Visible="@PreVisible" Disabled="@PreviousPageDisable" PrefixIcon="e-icons e-chevron-up" TooltipText="Previous Page" Id="previousPage" Align="ItemAlign.Center" CssClass="e-pv-previous-page-navigation-container" TabIndex="@GetTabIndex(PreviousPageDisable)">
                </ToolbarItem>
                
            }
            else if(templatename == "NextPage")
            {
                <ToolbarItem Text="Next Page" Visible="@NextVisible" Disabled="@NextPageDisable" PrefixIcon="e-icons e-chevron-down" TooltipText="Next Page" id="nextPage" Align="ItemAlign.Center" CssClass="e-pv-next-page-navigation-container" TabIndex="@GetTabIndex(NextPageDisable)">
                </ToolbarItem>
            }
            else if(templatename == "PageNumber")
            {
                <ToolbarItem Text="Page Number" Visible="@PageNumberVisible" Type="ItemType.Input" Align="ItemAlign.Center" Id="currentPageInput" TooltipText="Current Page Number" CssClass="e-pv-current-page-input-container" TabIndex="0">
                    <Template>
                        <SfNumericTextBox @ref="@CurrentPage"
                                        Max="@TotalPages"
                                        Min="0"
                                        Width="50px"
                                        TValue="int"
                                        Value="@CurrentPageNumber"
                                        ShowSpinButton=false>
                            <NumericTextBoxEvents ValueChange="GoToPage" TValue="int"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </Template>
                </ToolbarItem>
                <ToolbarItem Visible="@PageNumberVisible" Align="ItemAlign.Center" Id="totalPage" CssClass="e-pv-total-page-container">
                    <Template>
                        <span class="e-pv-total-page"> of @TotalPages</span>
                    </Template>
                </ToolbarItem>
            }
            else if (templatename == "Open")
            {
                <ToolbarItem Text="Open File" Visible="@OpenVisible" PrefixIcon="e-pv-open-document-icon e-pv-icon" TooltipText="Open File" Id="pdfviewer_open" Align="ItemAlign.Left" CssClass="e-pv-open-document-container e-pv-open-document" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "ZoomIn")
            {
                <ToolbarItem Text="Zoom In" Visible="@ZoomInVisible" PrefixIcon="e-icons e-circle-add" Id="zoomin" TooltipText="Zoom In" Align="ItemAlign.Center" CssClass="e-pv-zoom-in-container" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "ZoomOut")
            {
                <ToolbarItem Text="Zoom Out" Visible="@ZoomOutVisible" PrefixIcon="e-icons e-circle-remove" Id="zoomout" TooltipText="Zoom Out" Align="ItemAlign.Center" CssClass="e-pv-zoom-out-container" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "Download")
            {
                <ToolbarItem Text="Download" Visible="@DownloadVisible" PrefixIcon="e-icons e-download" TooltipText="Download File" Id="download" Align="ItemAlign.Right" CssClass="e-pv-download-document-container" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "Annotation")
            {
                <ToolbarItem Visible="@AnnotationVisible" CssClass="e-pv-annotation-container" Text="Edit Annotation" PrefixIcon="e-pv-annotation-icon e-pv-icon" TooltipText="Edit Annotation" Id="annotation" Align="ItemAlign.Right" TabIndex="0">
                </ToolbarItem>
            }
            else if (templatename == "TextSearch")
            {
                <ToolbarItem Text="Text Search" Visible="@SearchVisible" PrefixIcon="e-pv-text-search-icon e-pv-icon" TooltipText="Text Search" Id="textsearch" Align="ItemAlign.Right" CssClass="e-pv-text-search-container" TabIndex="0">
                </ToolbarItem>
            }
        };
    }

    // Method for Get the Tab Index for the Toolbar Item
    private int GetTabIndex(bool Boolean)
    {
        return (Boolean == true) ? -1 : 0; 
    }

    // Method to add items to the CustomToolbarItems list
    private void AddCustomToolbarItems()
    {
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 0, Template = GetTemplate("Open") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 1, Template = GetTemplate("PreviousPage") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 2, Template = GetTemplate("NextPage") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 3, Template = GetTemplate("PageNumber") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 4, Template = GetTemplate("ZoomIn") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 5, Template = GetTemplate("ZoomOut") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 6, Template = GetTemplate("Annotation") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 7, Template = GetTemplate("TextSearch") });
        CustomToolbarItems.Add(new PdfToolbarItem() { Index = 8, Template = GetTemplate("Download") });
    }

    //Triggers while loading document in to the PDFViewer.
    private void DocumentLoaded(LoadEventArgs args)
    {
        TotalPages = Viewer.PageCount;
        CurrentPageNumber = Viewer.CurrentPageNumber;
        NextPageDisable = false;
        if(TotalPages == 1)
        {
            PreviousPageDisable = true;
            NextPageDisable = true;
        }
    }

    // Clickevent for the CustomToolbarItems
    private async void ClickAction(ClickEventArgs Item)
    {
        if (Item.Item.Id == "previousPage")
        {
            await Viewer.GoToPreviousPageAsync();
            NextPageDisable = false;
        }
        else if (Item.Item.Id == "nextPage")
        {
            await Viewer.GoToNextPageAsync();
            PreviousPageDisable = false;
        }
        else if (Item.Item.Id == "zoomin")
        {
            await Viewer.ZoomInAsync();
        }
        else if (Item.Item.Id == "zoomout")
        {
            await Viewer.ZoomOutAsync();
        }
        else if (Item.Item.Id == "download")
        {
            await Viewer.DownloadAsync();
        }
    }

    //Triggers when the value of the numeric textbox changes.
    public async void GoToPage(Syncfusion.Blazor.Inputs.ChangeEventArgs<int> args)
    {
        int currentValue = args.Value;
        if (args.Event != null)
        {
            var changeEventArgs = args.Event as Microsoft.AspNetCore.Components.ChangeEventArgs;
            if (changeEventArgs != null && changeEventArgs.Value != null)
            {
                currentValue = int.Parse(changeEventArgs.Value.ToString());
            }
        }
        if (currentValue == args.Value && args.Value != 0)
        {
            CurrentPageNumber = args.Value;
            //Navigate to given page number in loaded document of the PDFViewer2.
            await Viewer.GoToPageAsync(args.Value);
        }
        else
        {
            CurrentPageNumber = Viewer.CurrentPageNumber;
        }
    }

    //Triggers when there is change in the current page number.
    private void OnPageChanged(PageChangeEventArgs args)
    {
        CurrentPageNumber = (int)args.CurrentPageNumber;
        if (args.CurrentPageNumber == TotalPages)
        {
            NextPageDisable = true;
            PreviousPageDisable = false;
        }
        if (args.CurrentPageNumber < TotalPages && args.CurrentPageNumber != 1)
        {
            PreviousPageDisable = false;
            NextPageDisable = false;
        }
        if (args.CurrentPageNumber == 1)
        {
            NextPageDisable = false;
            PreviousPageDisable = true;
        }
    }

    private void DownloadEndEvent(DownloadEndEventArgs downloadEndEvent)
    {
         string bas64string = downloadEndEvent.DownloadDocument.Replace("data:application/pdf;base64,", "");
         byte[] bytes = Convert.FromBase64String(bas64string);
         SaveService saveService = new();
         saveService.SaveAndView(downloadEndEvent.FileName, "application/pdf", new MemoryStream(bytes));
    }

    private async void ExportSuccessEvent(ExportSuccessEventArgs exportSuccessEvent)
    {
        if (!exportSuccess)
        {
            exportSuccess = true;
            Stream exportStream = new MemoryStream();
            string type = exportSuccessEvent.FileName.EndsWith("xfdf") ? "xfdf" : "json";
            if (type == "xfdf")
            {
                exportStream = await Viewer.ExportAnnotationAsStreamAsync(AnnotationDataFormat.Xfdf);
            }
            else
            {
                exportStream = await Viewer.ExportAnnotationAsStreamAsync(AnnotationDataFormat.Json);
            }
            exportSuccess = false;
            exportStream.Position = 0;
            MemoryStream newMemoryStream = new MemoryStream();
            exportStream.CopyTo(newMemoryStream);
            newMemoryStream.Position = 0;
            SaveService saveService = new();
            saveService.SaveAndView(exportSuccessEvent.FileName, "application/" + type, newMemoryStream);
        }
    }
}

@*Hidden:Lines*@
<!--Style for custom toolbar-->
<style>
    .div{
        padding-top: 10px;
    }

    .e-pv-total-page-container {
        margin-left: 6px;
    }

</style>
@*End:Hidden*@