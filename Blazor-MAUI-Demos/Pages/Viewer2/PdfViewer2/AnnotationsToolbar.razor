@page "/pdf-viewer-2/annotations-toolbar"

@using System.IO
@using Syncfusion.Blazor.SfPdfViewer
@using Blazor_MAUI_Demos.Services

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
<PageTitle>Blazor SfPdfViewer Annotations Example - Syncfusion Demos</PageTitle>
<HeadContent>
    <meta name="description" content="This example demonstrates the Annotations in Blazor SfPdfViewer Component. Explore here for more details." />
    <link rel="canonical" href="@canonicalURL" />
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the creation of different types of annotations in the SfPdfViewer, including Text Markup, Shapes, Measurements, Free text, Stamps, Handwritten signature, ink, and sticky notes. We can customize the added annotations or we can include new annotations through user interaction from the SfPdfViewer.</p>
</SampleDescription>
<ActionDescription>
@*WASM:Block*@
@{ #if WASM || WASM_HOSTED }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/annotation'> documentation section</a>.</p>
@{ #endif }
@*End:WASM*@

@*Server:Block*@
@{ #if !(WASM || WASM_HOSTED) }
    <p>More information about the SfPdfViewer can be found in this<a target='_blank' href='https://blazor.syncfusion.com/documentation/pdfviewer-2/annotation'> documentation section</a>.</p>
@{ #endif }
@*End:Server*@
</ActionDescription>

<div class="control-section">

    <SfPdfViewer2 @ref="Viewer" DocumentPath="@DocumentPath" EnableAnnotationToolbar="true" CommentPanelVisible="true" Height="640px" Width="100%">
    <PdfViewerEvents DownloadEnd="@DownloadEndEvent" ExportSucceed="@ExportSuccessEvent"></PdfViewerEvents>
    </SfPdfViewer2>

</div>

@code {

    //Hidden:Lines
    private string canonicalURL { get; set; }
    //End:Hidden

    SfPdfViewer2 Viewer;
    private string DocumentPath { get; set; } = "";
    private bool exportSuccess { get; set; } = false;

    protected override void OnInitialized()
    {
        //Hidden:Lines
        canonicalURL = NavigationManager.Uri.Split("?")[0];
        #if MAUI 
        string basePath = "Blazor_MAUI_Demos.wwwroot.data.pdfviewer2.annotations.pdf";
        Stream DocumentStream = this.GetType().Assembly.GetManifestResourceStream(basePath);
        DocumentStream.Position = 0;
        using (MemoryStream memoryStream = new MemoryStream())
        {
            DocumentStream.CopyTo(memoryStream);
            byte[] bytes = memoryStream.ToArray();
            string base64String = Convert.ToBase64String(bytes);
            string base64prefix = "data:application/pdf;base64,";
            //Assigned the base64 path to the PDF document path.
            DocumentPath = $"{base64prefix}{base64String}";
        }
#endif
        //End:Hidden
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
        
@*Server:Block*@
#if !(WASM || WASM_HOSTED || MAUI)
        //Sets the PDF document path for initial loading.
        DocumentPath = "wwwroot/data/pdfviewer2/Annotations.pdf";
#endif
@*End:Server*@

@*WebAssembly:Block*@
#if (WASM || WASM_HOSTED)
        //Sets the PDF document path for initial loading.
        DocumentPath= fileDataPath + "data/pdfviewer2/annotations.pdf";
#endif
@*End:WebAssembly*@
    }

    private void DownloadEndEvent(DownloadEndEventArgs downloadEndEvent)
    {
         string bas64string = downloadEndEvent.DownloadDocument.Replace("data:application/pdf;base64,", "");
         byte[] bytes = Convert.FromBase64String(bas64string);
         SaveService saveService = new();
         saveService.SaveAndView(downloadEndEvent.FileName, "application/pdf", new MemoryStream(bytes));
    }

    private async void ExportSuccessEvent(ExportSuccessEventArgs exportSuccessEvent)
    {
        if (!exportSuccess)
        {
            exportSuccess = true;
            Stream exportStream = new MemoryStream();
            string type = exportSuccessEvent.FileName.EndsWith("xfdf") ? "xfdf" : "json";
            if (type == "xfdf")
            {
                exportStream = await Viewer.ExportAnnotationAsStreamAsync(AnnotationDataFormat.Xfdf);
            }
            else
            {
                exportStream = await Viewer.ExportAnnotationAsStreamAsync(AnnotationDataFormat.Json);
            }
            exportSuccess = false;
            exportStream.Position = 0;
            MemoryStream newMemoryStream = new MemoryStream();
            exportStream.CopyTo(newMemoryStream);
            newMemoryStream.Position = 0;
            SaveService saveService = new();
            saveService.SaveAndView(exportSuccessEvent.FileName, "application/" + type, newMemoryStream);
        }
    }
}
