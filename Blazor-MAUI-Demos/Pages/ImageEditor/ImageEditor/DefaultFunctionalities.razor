@page "/image-editor/default-functionalities"

@using Syncfusion.Blazor.ImageEditor
@using Syncfusion.Blazor.Navigations
@using Blazor_MAUI_Demos.Services

@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
<PageTitle>Blazor Image Editor Default Functionalities Example - Syncfusion Demos</PageTitle>
<HeadContent>
    This sample demonstrates Image Editor features such as crop, rotate, flip, insert shape and text.
</HeadContent>
@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates the default rendering of the <a href="https://www.syncfusion.com/blazor-components/blazor-wysiwyg-image-editor">Blazor Image Editor</a> with minimum configuration in the Blazor application.</p>
</SampleDescription>
<ActionDescription>
    <p>The Image Editor component provides built-in support to edit images in the following ways through APIs:</p>
    <ul>
        <li><code>Selection</code> : Multiple selection options are available. The selection region can be a square or circle, customized to various aspects ratios, and customized by dragging and resizing.</li>
        <li><code>Crop</code> : The image can be cropped based on the selection.</li>
        <li><code>Rotate</code> : The image can be rotated both clockwise and anticlockwise by 90 degrees.</li>
        <li><code>Flip</code> : The image can be flipped both horizontally and vertically.</li>
        <li><code>Zoom</code> : The image can be zoomed in and out.</li>
        <li><code>Pan</code> : View the entire image by toggling the pan option from the toolbar.</li>
        <li><code>Freehand drawing</code> : Draw freehand on the image and adjust the pen's stroke width and stroke color.</li>
        <li><code>Reset</code> : Revert all the edited states and load the original image.</li>
        <li><code>Save</code> : Save the edited image in JPEG, PNG, and SVG formats.</li>
        <li><code>Annotation</code> : Text, rectangle, ellipse, and line annotation shapes are supported.</li>
    </ul>
</ActionDescription>
<div class="control-section">
    <SfImageEditor @ref="ImageEditor" Height="500px">
        <ImageEditorEvents Created="created" Saving="Saving"></ImageEditorEvents>
    </SfImageEditor>
</div>

@code {
    //Hidden:Lines
    private string canonicalURL { get; set; }

    protected override void OnInitialized()
    {
        canonicalURL = NavigationManager.Uri.Split("?")[0];
    }
    //End:Hidden
    SfImageEditor ImageEditor;
    private void created()
    {
        ImageEditor.OpenAsync($"{SampleService.WebAssetsPath}images/image-editor/flower.png");
    }
    private async void Saving(SaveEventArgs args)
    {
        args.Cancel = true;
        if (args.FileType == ImageEditorFileType.PNG || args.FileType == ImageEditorFileType.JPEG || args.FileType == ImageEditorFileType.SVG)
        {
            string contentType = args.FileType.ToString().ToLower();
            string fileType = "." + args.FileType.ToString().ToLower();
            var dataUrl = await ImageEditor.GetImageDataUrlAsync();
            string base64String = dataUrl.Split(',')[1];
            byte[] buffer = Convert.FromBase64String(base64String);
            SaveService save = new();
            save.SaveAndView(string.Concat("Image", fileType), "application/" + contentType, new MemoryStream(buffer));
        }
    }
}
