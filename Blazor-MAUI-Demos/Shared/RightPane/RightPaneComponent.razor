﻿﻿@using Syncfusion.Blazor.Navigations;

@namespace Blazor_MAUI_Demos.Shared

@inject NavigationManager UriHelper;
@inject SampleService SampleService;
@inject IJSRuntime JsRuntime;

<div class="@rootClass" id='right-pane'>
    <div class='sb-desktop-wrapper'>
        <div>
            <div class='sb-demo-section'>
                <div class="control-fluid">
                    <div class="container-fluid">
                        <div id="control-content">
                            @ChildContent
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int tabSelectedItem { get; set; }
    private RenderFragment actionDescription { get; set; }
    private RenderFragment sampleDescription { get; set; }
    private string rootClass = "sb-right-pane e-view " + SampleUtils.RIGHT_PANE;

    protected SourceCodeComponent SourceCodeRef { get; set; }
    protected ActionDescription ActionDescriptionRef { get; set; }
    protected SampleDescription SampleDescriptionRef { get; set; }
    private bool IsMobileMode = false;

    [CascadingParameter]
    protected MainLayout Layout { get; set; }

    /// <summary>
    /// Footer reference for outside usage.
    /// </summary>
    public FooterComponent FooterRef { get; set; }

    /// <summary>
    /// BreadCrumb reference for outside usage.
    /// </summary>
    public BreadCrumbComponent BreadCrumbRef { get; set; }

    /// <summary>
    /// SampleNavigator reference for outside usage.
    /// </summary>
    public SampleNavigator SampleNavigatorRef { get; set; }

    /// <summary>
    /// Child content of RightPane component.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Refresh action description for current sample.
    /// </summary>
    public void RefreshActionDescription(RenderFragment description)
    {
        actionDescription = description;
        //ActionDescriptionRef.Refresh();
    }

    /// <summary>
    /// Refresh sample description for current sample.
    /// </summary>
    public void RefreshSampleDescription(RenderFragment description)
    {
        SampleService.Update(UriHelper);
        var componentName = SampleService.SampleInfo.Directory == "Buttons/Button" ? "Button" : SampleService.ComponentName;
        //BreadCrumbRef.Refresh(componentName, SampleService.SampleInfo.Category, SampleService.SampleInfo.Name);
        sampleDescription = description;
        // SampleDescriptionRef.Refresh();
    }

    /// <summary>
    /// Re-render the source code tab with first indexed tab item.
    /// </summary>
    public void TabSelectedItemChange()
    {
        this.tabSelectedItem = 0;
        StateHasChanged();
    }

    // Source tab selecting handler.
    private void OnSourceTabSelecting(Syncfusion.Blazor.Navigations.SelectingEventArgs args)
    {
        if (args.IsSwiped)
        {
            args.Cancel = true;
        }
    }

    // Source tab selected handler.
    private async Task OnSourceTabSelected(Syncfusion.Blazor.Navigations.SelectEventArgs args)
    {
        if (this.SourceCodeRef != null)
        {
            await this.SourceCodeRef.OnSourceTabSelected(args);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            // SampleNavigatorRef.RefreshState(SampleService.SampleInfo?.Url,true);
        }
        // if (SampleNavigatorRef.isNavigated)
        // {
        //     TabSelectedItemChange();
        //     SampleNavigatorRef.isNavigated = false;
        //     Layout.LeftPaneRef.NavMenuRef.SelectItem(SampleService.SampleInfo);
        // }
        // FooterRef.Refresh();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        // Expand or collapse right pane based on the condition.
        if (this.Layout.LeftPaneRef == null || this.Layout.LeftPaneRef.IsExpanded())
        {
            this.rootClass = SampleUtils.RemoveClass(rootClass, SampleUtils.RIGHT_PANE_EXPAND);
            this.rootClass = SampleUtils.AddClass(rootClass, SampleUtils.RIGHT_PANE_COLLAPSE);
        }
        else
        {
            this.rootClass = SampleUtils.RemoveClass(rootClass, SampleUtils.RIGHT_PANE_COLLAPSE);
            this.rootClass = SampleUtils.AddClass(rootClass, SampleUtils.RIGHT_PANE_EXPAND);
        }
    }
}