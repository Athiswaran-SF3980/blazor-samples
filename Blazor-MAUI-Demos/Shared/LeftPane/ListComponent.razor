@namespace Blazor_MAUI_Demos.Shared
@implements IDisposable;

@inject NavigationManager UriHelper;
@inject SampleService SampleService;
@inject IJSRuntime JSRuntime

@using System.Text.Json

<div style="margin-top: 0px;" role="list" tabindex="0">
<style>
    .hide-scrollbar::-webkit-scrollbar {
        display: none;
    }

    .list-container::-webkit-scrollbar {
        display: none;
    }

    .list-container {
        display: flex;
        overflow-x: auto;
        white-space: nowrap;
        padding: 0px;
        background: #6750A4;
    }

    .bootstrap5-dark .list-container {
        background-color: #D0BCFF
    }

    .material3-dark .list-container {
        background-color: #D0BCFF
    }

    .fluent-dark .list-container {
        background-color: #D0BCFF
    }

    .tailwind-dark .list-container {
        background-color: #D0BCFF
    }

    .highcontrast .list-container, .fluent2-highcontrast .list-container, .tailwind3-dark .list-container, .fluent2-dark .list-container {
        background-color: #D0BCFF
    }

    .nested-list-container {
        white-space: nowrap;
        margin-top: -10px;
    }

    .nested-list {
        display: none;
        list-style: none;
        padding: 0;
        background-color: white;
        border: 1px solid #ccc;
        overflow-x: auto;
        scrollbar-width: none;
        white-space: nowrap;
    }

    .bootstrap5-dark .nested-list {
        background-color: #444746;
    }

    .material3-dark .nested-list {
        background-color: #444746;
    }

    .fluent-dark .nested-list {
        background-color: #444746;
    }

    .tailwind-dark .nested-list {
        background-color: #444746;
    }

    .highcontrast .nested-list, .fluent2-highcontrast .nested-list, .tailwind3-dark .nested-list, .fluent2-dark .nested-list {
        background-color: #444746;
    }

    .nested-list::-webkit-scrollbar {
        display: none;
    }

    .list-item {
        display: inline-block;
        margin-right: 10px;
        vertical-align: top;
        cursor: pointer;
        color: #FFFFFF;
    }
</style>

    <div class="hide-scrollbar">
        <ul class="list-container" role="presentation">
            @if (groupData != null)
            {
                var hasActiveItem = false;
                @foreach (var group in @groupData)
                {
                    var groupName = group.FirstOrDefault().Category;
                    if (GroupTemplate != null && groupName != null && this.groupList != null && !this.groupList.Contains(groupName))
                    {
                        var liGroupClass = SampleUtils.LIST_LI_GROUP_CLASS;
                        if (groupName.Equals(selectedItem.Category))
                        {
                            liGroupClass = SampleUtils.AddClass(liGroupClass, SampleUtils.LIST_LI_GROUP_ACTIVE_CLASS);
                        }
                        this.groupList.Add(groupName);
                        // Serialize the group object to JSON
                        var groupJson = JsonSerializer.Serialize(group);
                        <li class="list-item @liGroupClass" role="listitem" onclick="toggleList('@groupName')">
                            @GroupTemplate(group.FirstOrDefault())
                        </li>
                    }
                }
            }
        </ul>
    </div>

    <div class="nested-list-container">
        @if (groupData != null)
        {
            @foreach (var group in @groupData)
            {
                var groupName = group.FirstOrDefault().Category;
                if (GroupTemplate != null && groupName != null && this.groupList != null && this.groupList.Contains(groupName))
                {
                    <ul id="@groupName" class="nested-list">
                        @foreach (var item in group)
                        {
                            if ((Template != null && (!item.IsHideInMobile)))
                            {
                                var liClass = SampleUtils.LIST_LI_CLASS;
                                if (EqualityComparer<Sample>.Default.Equals(item, selectedItem))
                                {
                                    liClass = SampleUtils.AddClass(liClass, SampleUtils.LIST_ACTIVE);
                                }
                                <li class="@liClass" role="listitem" @onclick="@(async () => { await OnSelection(item); })" style="display: inline-block;">
                                    @Template(item)
                                </li>
                            }
                        }
                    </ul>
                }
            }
        }
    </div>
</div>

@code {
    private Sample selectedItem;
    private Sample selectedGroup;
    private List<string> groupList;
    private List<List<Sample>> groupData { get; set; }
    private string classNames = SampleUtils.LIST_CLASS;
    private bool firstRender = true;

    /// <summary>
    /// Child content of ListComponent.
    /// </summary>
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Specifies the datasource of list component.
    /// </summary>
    [Parameter]
    public IEnumerable<Sample> DataSource { get; set; }

    /// <summary>
    /// Specifies the group template of list component.
    /// </summary>
    [Parameter]
    public RenderFragment<Sample> GroupTemplate { get; set; }

    /// <summary>
    /// Specifies the item template of list component.
    /// </summary>
    [Parameter]
    public RenderFragment<Sample> Template { get; set; }

    /// <summary>
    /// Triggers event callback on item selection.
    /// </summary>
    [Parameter]
    public EventCallback<Sample> OnSelectList { get; set; }

    /// <summary>
    /// Set selection to the list component based on given item.
    /// </summary>
    /// <param name="item">Item that need to be selected.</param>
    public void SelectItem(Sample item)
    {
        selectedItem = item;
        selectedGroup = item;
        this.groupList = new List<string>();
        StateHasChanged();
    }

    // Item click handler
    private async Task OnSelection(Sample item)
    {
        if (this.OnSelectList.HasDelegate)
        {
            selectedItem = item;
            selectedGroup = item;
            await this.OnSelectList.InvokeAsync(item);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this.groupList = new List<string>();
        // Set selection to the intial rendering.
        if (this.DataSource.Count() > 0)
        {
            groupData = this.DataSource.GroupBy(g => g.Category).Select(s => s.ToList()).ToList();
            if (selectedItem == null)
            {
                SampleService.Update(UriHelper);
            }
            selectedItem = SampleService.SampleInfo;
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        this.groupList = null;
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeActiveGroup");
        }
    }

    public void Dispose()
    {
        selectedItem = null;
        groupList = null;
        groupData = null;
        DataSource = null;
    }
}