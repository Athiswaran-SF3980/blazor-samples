@namespace Blazor_MAUI_Demos.Shared
@using System.Globalization
@implements IDisposable;

@inject SampleService SampleService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;

<DropDownComponent @ref="DropDownRef" DataSource="@cultureData" Value="@culture" OnSelect="@OnSelected"></DropDownComponent>

@code {
    private string culture { get; set; }
    internal DropDownComponent DropDownRef { get; set; }

    private List<DropDownData> cultureData = new List<DropDownData> {
        new DropDownData() { ID = "en-US", Text = "English" },
        new DropDownData() { ID = "de-DE", Text = "German - Germany*" },
        new DropDownData() { ID = "fr-CH", Text = "French - Switzerland*" },
        new DropDownData() { ID = "zh-CN", Text = "Chinese - China*" },
    };

    // Culture selection event callback handler
    private async void OnSelected(DropDownData args)
    {
        var culture = args.ID;
        await this.SetValueAsync<string>("UserSelected", culture);
        var selectedCulture = new CultureInfo(culture);
        CultureInfo.DefaultThreadCurrentCulture = selectedCulture;
        CultureInfo.DefaultThreadCurrentUICulture = selectedCulture;
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
        protected override void OnInitialized()
        {
            base.OnInitialized();
            var currentCulture = cultureData.Where(item => item.ID == System.Globalization.CultureInfo.CurrentCulture.Name).ToList();
            if (currentCulture.Any())
            {
                culture = currentCulture.First().Text;
            }
        }
        public async Task SetValueAsync<T>(string key, T value)
        {
            await this.JSRuntime.InvokeVoidAsync("sfBlazorSB.setValue", key, value);
        }
        public void Dispose()
        {
            cultureData = null;
        }

}
