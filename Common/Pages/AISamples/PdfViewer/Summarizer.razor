@page "/ai-pdfviewer-2/summarizer"
@using System.IO
@using Microsoft.JSInterop
@using Syncfusion.Blazor
@using Syncfusion.Blazor.SfPdfViewer
@using Syncfusion.Blazor.Spinner
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Notifications
@inject IJSRuntime JsRuntime
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.InteractiveChat
@using Syncfusion.Blazor.SplitButtons
@using System.Text.RegularExpressions;
@using BlazorDemos.Model
@using BlazorDemos.Service
@using SmartComponents.LocalEmbeddings
@inject LocalEmbedder embedder;
@inject AzureAIService openAIService
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable
@*End:Hidden*@


<SampleDescription>
    <p>
        This sample showcases how the Syncfusion Blazor PDF Viewer can intelligently perform PDF summarization and Q&A. Users can obtain a summary of a PDF document by clicking the "AI AssistView" button at the bottom-right of the PDFViewer. After the summary is generated, users can ask questions related to the document, using either their own queries or AI-generated suggestions.
    </p>
    <p>
        Explore our <strong>Smart AI demos</strong> with limited AI token usage directly in your browser. To dive deeper and try out these features locally using your own API key, check out our
        <a href="https://github.com/syncfusion/smart-ai-samples/tree/master/blazor" target="_blank" aria-label="Navigate to the Syncfusion Smart AI Samples GitHub repository">
            <strong>Syncfusion Smart AI Samples</strong>
        </a> on GitHub.
    </p>
</SampleDescription>

<ActionDescription>
    <p>
        <strong>PDF Summarization:</strong> PDF Summarization provides users with a comprehensive overview of a document's content. The AI generates a detailed summary, highlighting key points. This feature streamlines understanding complex documents in just a few clicks.
    </p>
    
    <p>
        <strong>Q&A:</strong> The Q&A feature allows users to ask questions about the document's content. Users can either input their own queries or choose from AI-generated suggestions. This makes it easier to find specific information within the document.
    </p>

    <p>
        <strong>Reference Page Navigation:</strong> This feature allows users to navigate directly to relevant pages in the document based on their queries. When a question is asked, the tool identifies the specific content and directs the user to the corresponding page. It streamlines finding specific information within the document.
    </p>
</ActionDescription>

@*Hidden:Lines*@
<AINotification></AINotification>
@*End:Hidden*@

@*Hidden:Lines*@
<AIToastNotification></AIToastNotification>
@*End:Hidden*@

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="control-section">
             <div class="summarize-container">
                 <div id="left" style="width:@(isPopupVisible ?" 70%" : "100%" )">
                     <SfPdfViewer2 id="pdf-viewer" @ref="sfPdfViewer2" DocumentPath="https://cdn.syncfusion.com/content/pdf/pdf-succinctly.pdf"
                         ZoomMode="ZoomMode.FitToPage">
                         <PdfViewerEvents DocumentLoaded="DocumentLoaded" DocumentUnloaded="DocumentUnLoaded"></PdfViewerEvents>
                     </SfPdfViewer2>
                     @if (isDocumentLoaded && !isPopupVisible)
                     {
                         <SfFab IconCss="e-icons e-ai-chat" OnClick="ToggleAssistView" Position="FabPosition.BottomRight" Target="#pdf-viewer"></SfFab>
                     }
                 </div>

                 @if (isPopupVisible)
                 {
                 <div id="right" style="width:@(isPopupVisible ?" 30%" : "0%" )">
                     <SfAIAssistView @ref="aIAssistView" Height="100%" Prompts="@_prompts"
                         PromptPlaceholder="@_promptPlaceholder" PromptSuggestionsHeader="Suggested Prompts"
                         PromptSuggestions="@_promptSuggestions" ResponseIconCss="e-icons e-aiassist-chat"
                         PromptRequested="@OnPromptRequested" CssClass="custom-ai-assist">

                         <AssistViews>
                             <AssistView IconCss="e-icons e-aiassist-chat">
                                 <BannerTemplate>
                                     <div class="ai-assist-banner">
                                         <div class="e-icons e-aiassist-chat"></div>
                                         <h2>AI Assistant</h2>
                                     </div>
                                 </BannerTemplate>
                                 <ChildContent>
                                     <PromptToolbar ItemClicked="PromptToolbarItemClicked">
                                     </PromptToolbar>

                                     <ResponseToolbar ItemClicked="ResponseToolbarItemClicked">
                                     </ResponseToolbar>
                                 </ChildContent>
                             </AssistView>
                         </AssistViews>

                         <AssistViewToolbar ItemClicked="ToolbarItemClicked">
                             <AssistViewToolbarItem Type="ItemType.Spacer"></AssistViewToolbarItem>
                             <AssistViewToolbarItem IconCss="e-icons e-refresh"></AssistViewToolbarItem>
                             <AssistViewToolbarItem IconCss="e-icons e-close"></AssistViewToolbarItem>
                         </AssistViewToolbar>
                     </SfAIAssistView>
                 </div>
                 }
             </div>
        </div>
    </div>
</div>

<style>
    #right .e-aiassistview .e-footer{
        width: 100%;
    }
    .e-fab.e-btn.e-fab-right {
        right: 75px !important;
    }
    .summarize-container {
        display: flex;
        width: 100%
    }

    #left {
        transition: width 0.3s;
        position: relative;
    }

    #right {
        transition: width 0.3s;
        height: 100% !important;
        padding-left: 20px;
    }

    .assist-view-btn {
        position: absolute !important;
        bottom: 40px !important;
        right: 40px !important;
    }
    .e-bigger .assist-view-btn {
        bottom: 24px !important;
    }

    .e-aiassist-footer,
    .e-aiassist-view-container {
        width: 100% !important;
    }
    .custom-dialog .e-dlg-content {
        padding: 0;
    }

    .custom-ai-assist {
        border: none;
    }

    .ai-assist-banner {
        display: flex;
        flex-direction: column;
        justify-content: center;
        height: 200px;
        font-size: 18px;
        align-items: center;
        text-align: center;
    }

    .ai-assist-banner h2 {
        margin: 0;
    }

    .ai-assist-banner .e-icons:before {
        font-size: 40px;
    }

    .compose-view,
    .output-view {
        width: max(70%, 400px);
        border: 1px solid lightgray;
        padding: 15px;
        margin: 15px auto 20px;
        border-radius: 7px;
    }

    .custom-btn {
        width: 100%;
        border-radius: 50px;
        margin: 20px 0;
    }

    #AnnotationToolbar .e-toolbar-item.e-template .e-dropdown-btn {
        border: none !important;
        box-shadow: none;
    }

    .db-menu-container .e-dropdown-btn {
        border: none;
        box-shadow: none;
    }

    .e-aiassist-view .e-aiassist-footer .e-aiassist-send {
        bottom: 36% !important
    }
</style>

@code{
    private static SfPdfViewer2 sfPdfViewer2;
    private SfAIAssistView aIAssistView;
    private bool isPopupVisible = false;
    private bool isMobileDevice = false;
    private bool isDocumentLoaded = false;
    private bool isSummarized = false;
    private bool isDocumentLoadedInAI = false;
    private bool refreshContainer = false;
    private PDFViewerModel summarizer;
    private MemoryStream documentStream = new MemoryStream();
    private string _promptPlaceholder = "Type your prompt for assistance...";

    protected override Task OnInitializedAsync()
    {
        summarizer = new PDFViewerModel(embedder, openAIService);
        return base.OnInitializedAsync();
    }

    private List<string> _promptSuggestions = new List<string>();

    private void PromptToolbarItemClicked(AssistViewToolbarItemClickedEventArgs args)
    {
        // handle your actions
    }

    private async Task ResponseToolbarItemClicked(AssistViewToolbarItemClickedEventArgs args)
    {
        if (args.Item.IconCss == "e-icons e-aiassist-copy")
        {
            string pattern = @"<a[^>]*>(\d+)</a>";
            string textToCopy = Regex.Replace(_prompts[args.DataIndex].Response, pattern, "$1");
            await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", textToCopy);
        }
    }

    private List<AssistViewPrompt> _prompts = new List<AssistViewPrompt>();

    private void ToggleAssistView()
    {
        isPopupVisible = !isPopupVisible;
        refreshContainer = true;
    }

    //Will be called when the prompt is entered 
    private async Task OnPromptRequested(AssistViewPromptRequestedEventArgs args)
    {
        await Task.Delay(2000);
        string suggestions = string.Empty;
        //get the response from the AI for the prompt
        if (args.Prompt == "Summarize this document.")
        {
            args.Response = await SummaryPDF();
            suggestions = await summarizer.GetSuggestions();
        }
        else
        {
            var response = await summarizer.GetAnswer(args.Prompt);
            // Split by "suggestions"
            string[] responseArray = response.Split(new[] { "suggestions" }, StringSplitOptions.None);
            if (responseArray.Length > 1)
            {
                args.Response = responseArray[0];
                suggestions = responseArray[1];
            }
        }
        if (suggestions != null)
        {
            _promptSuggestions = new List<string>(suggestions.Split('\n').Where(s => !string.IsNullOrWhiteSpace(s)).Select(s => System.Text.RegularExpressions.Regex.Replace(s, @"^\d+\.\s*", "")));
        }
        if (args.Response != null)
        {
            string pattern = @"\[(?:Page )?(\d+(?:,\s*\d+)*)\]";
            // Replace the pattern with an HTML anchor tag
            args.Response = Regex.Replace(args.Response, pattern, m =>
            {
                // Split the matched value by commas and optional spaces
                var pages = m.Groups[1].Value.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
                var links = string.Join(", ", pages.Select(page => $"<a href=\"pdfviewer/summarizer/#\" onclick=\"goToPage({page})\">{page}</a>"));
                return $"[{links}]";
            });
        }
    }

    [JSInvokable]
    public async Task GoToPage(int pageNumber)
    {
        if (pageNumber > 0)
        {
            await sfPdfViewer2.GoToPageAsync(pageNumber);
            if (isMobileDevice)
            {
                isPopupVisible = false;
                StateHasChanged();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isMobileDevice = await JsRuntime.InvokeAsync<bool>("isMobileDevice", false);
            var dotNetObjectRef = DotNetObjectReference.Create(this);
            await JsRuntime.InvokeVoidAsync("initializeJSInterop", dotNetObjectRef);
        }
        await base.OnAfterRenderAsync(firstRender);
        if (refreshContainer)
        {
            await Task.Delay(300);
            await sfPdfViewer2.UpdateViewerContainerAsync();
            if (isPopupVisible && !isSummarized)
            {
                isSummarized = true;
                //Initial prompt for AI
                await aIAssistView.ExecutePromptAsync("Summarize this document.");
                StateHasChanged();
            }
            refreshContainer = false;
        }
    }

    private async void ToolbarItemClicked(AssistViewToolbarItemClickedEventArgs args)
    {
        if (args.Item.IconCss == "e-icons e-close")
        {
            // Close the popup and refresh the container
            isPopupVisible = false;
            refreshContainer = true;
        }
        else if (args.Item.IconCss == "e-icons e-refresh")
        {
            if (_prompts.Count > 0)
            {
                AssistViewPrompt lastPrompt = _prompts.Last();
                // Remove the last prompt from the list
                _prompts.RemoveAt(_prompts.Count - 1);
                // Request the last prompt from the list
                await aIAssistView.ExecutePromptAsync(lastPrompt.Prompt);
            }
        }
    }

    public void DocumentLoaded(LoadEventArgs args)
    {
        isDocumentLoaded = true;

    }
    public void DocumentUnLoaded(UnloadEventArgs args)
    {
        //reset to initial state
        isDocumentLoaded = false;
        isSummarized = false;
        isDocumentLoadedInAI = false;
        isPopupVisible = false;
        _prompts?.Clear();
        _promptSuggestions?.Clear();
    }

    public void Dispose()
    {
        isDocumentLoaded = false;
        isSummarized = false;
        isDocumentLoadedInAI = false;
        isPopupVisible = false;
        _prompts?.Clear();
        _promptSuggestions?.Clear();
        if (summarizer is IDisposable disposableSummarizer)
        {
            disposableSummarizer.Dispose();
        }
        documentStream?.Dispose();
    }

    #region AI Query Methods
    private async Task<string> SummaryPDF()
    {
        string systemPrompt = "You are a helpful assistant. Your task is to analyze the provided text and generate short summary.";
        if (!isDocumentLoadedInAI)
        {
            byte[] bytes = await sfPdfViewer2.GetDocumentAsync();
            documentStream = new MemoryStream(bytes);
            await summarizer.LoadDocument(documentStream, "application/pdf");
            isDocumentLoadedInAI = true;
        }
        //get the summary of the PDF
        return await summarizer.FetchResponseFromAIService(systemPrompt);
    }
    #endregion
}